--- File: /home/flow/student-dashboard/.gitignore ---
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.
/drizzle/

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts


--- File: /home/flow/student-dashboard/package.json ---
{
  "name": "app",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "db:seed": "npx ts-node src/db/seeders.ts",
    "db:migrate": "npx ts-node --esm src/db/migrate.ts"
  },
  "dependencies": {
    "@auth/drizzle-adapter": "^1.10.0",
    "@azure/app-configuration": "^1.9.0",
    "@azure/identity": "^4.10.2",
    "@azure/keyvault-secrets": "^4.10.0",
    "@heroicons/react": "^2.2.0",
    "@radix-ui/react-label": "^2.1.7",
    "@radix-ui/react-select": "^2.2.5",
    "bcrypt": "^6.0.0",
    "bcryptjs": "^3.0.2",
    "canvas": "^3.1.2",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "dgram": "^1.0.1",
    "drizzle-orm": "^0.44.2",
    "jspdf": "^3.0.1",
    "jspdf-autotable": "^5.0.2",
    "lucide-react": "^0.525.0",
    "next": "15.2.3",
    "next-auth": "^4.24.11",
    "next-themes": "^0.4.6",
    "pg": "^8.16.3",
    "react": "^19.0.0",
    "react-datepicker": "^8.4.0",
    "react-dom": "^19.0.0",
    "recharts": "^3.0.2",
    "tailwind-merge": "^3.3.1",
    "uuid": "^11.1.0"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/bcryptjs": "^3.0.0",
    "@types/node": "^20",
    "@types/pg": "^8.15.4",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "@types/web-bluetooth": "^0.0.21",
    "autoprefixer": "^10.4.21",
    "drizzle-kit": "^0.31.4",
    "postcss": "^8.5.6",
    "tailwindcss": "^4.1.11",
    "typescript": "^5"
  }
}


--- File: /home/flow/student-dashboard/StudentDashboard.txt ---


--- File: /home/flow/student-dashboard/next-env.d.ts ---
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/app/api-reference/config/typescript for more information.


--- File: /home/flow/student-dashboard/drizzle.config.ts ---
import { defineConfig } from "drizzle-kit";

export default defineConfig({
  schema: "./src/db/schema.ts",
  dialect: "postgresql",
  out: "./drizzle",
  dbCredentials: {
    url: process.env.POSTGRES_URL!,
  },
});


--- File: /home/flow/student-dashboard/test.py ---
import os
import argparse
import fnmatch

def export_files(directory, output_file, exclude_paths=None, exclude_patterns=None):
    """
    Exports files from a directory to a single file, with options to exclude
    specific paths and file patterns.

    Args:
        directory (str): The path to the directory to scan.
        output_file (str): The path to the output file.
        exclude_paths (list, optional): A list of paths to exclude. Defaults to None.
        exclude_patterns (list, optional): A list of file patterns to exclude (e.g., '*.log', 'temp_*').
                                            Defaults to None.
    """
    if exclude_paths is None:
        exclude_paths = []
    if exclude_patterns is None:
        exclude_patterns = []

    # Normalize paths for reliable comparison
    exclude_paths = [os.path.abspath(p) for p in exclude_paths]
  
    with open(output_file, 'w', encoding='utf-8') as out_f:
        for root, _, files in os.walk(directory):
            # Check if the current directory should be excluded
            if any(map(lambda x: os.path.abspath(root).startswith(x), exclude_paths)):
                continue

            for file in files:
                file_path = os.path.join(root, file)
                file_abs_path = os.path.abspath(file_path)
                print(file_abs_path)
                

                # Check if the file path or pattern should be excluded
                if file_abs_path in exclude_paths:
                    continue
                if any(fnmatch.fnmatch(file, pattern) for pattern in exclude_patterns):
                    continue

                try:
                    with open(file_path, 'r', encoding='utf-8', errors='ignore') as in_f:
                        content = in_f.read()
                    out_f.write(f"--- File: {file_abs_path} ---\n")
                    out_f.write(content)
                    out_f.write("\n\n")
                except Exception as e:
                    print(f"Error reading file {file_path}: {e}")

def main():
    """Main function to parse arguments and run the export process."""
    parser = argparse.ArgumentParser(
        description="Export files from a directory to a single file."
    )
    parser.add_argument(
        "directory",
        help="The directory to scan."
    )
    parser.add_argument(
        "output_file",
        help="The file to write the output to."
    )
    parser.add_argument(
        "--exclude-paths",
        help="A comma-separated list of directory or file paths to exclude."
    )
    parser.add_argument(
        "--exclude-patterns",
        help="A comma-separated list of file patterns to exclude (e.g., '*.log', 'temp_*')."
    )

    args = parser.parse_args()

    exclude_paths_list = args.exclude_paths.split(',') if args.exclude_paths else []
    exclude_patterns_list = args.exclude_patterns.split(',') if args.exclude_patterns else []

    print(exclude_paths_list, exclude_patterns_list)

    export_files(
        args.directory,
        args.output_file,
        exclude_paths_list,
        exclude_patterns_list
    )
    print(f"Export complete. All files have been written to {args.output_file}")

if __name__ == "__main__":
    main()


--- File: /home/flow/student-dashboard/knexfile.js ---
// Update with your config settings.

/**
 * @type { Object.<string, import("knex").Knex.Config> }
 */
module.exports = {

  development: {
    client: 'pg', // We are using the 'pg' driver
    connection: process.env.PG_CONNECTION_STRING,
    migrations: {
      directory: './db/migrations'
    },
    seeds: {
      directory: './db/seeds'
    }
  },

  staging: {
    client: 'postgresql',
    connection: {
      database: 'my_db',
      user:     'username',
      password: 'password'
    },
    pool: {
      min: 2,
      max: 10
    },
    migrations: {
      tableName: 'knex_migrations'
    }
  },

  production: {
    client: 'postgresql',
    connection: {
      database: 'my_db',
      user:     'username',
      password: 'password'
    },
    pool: {
      min: 2,
      max: 10
    },
    migrations: {
      tableName: 'knex_migrations'
    }
  }

};


--- File: /home/flow/student-dashboard/tsconfig.json ---
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": false,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}


--- File: /home/flow/student-dashboard/.env ---
POSTGRES_URL="postgresql://neondb_owner:npg_cJgIFie78oPY@ep-empty-haze-aba6jwud-pooler.eu-west-2.aws.neon.tech/neondb?sslmode=require&channel_binding=require"
# POSTGRES_URL="postgresql://neondb_owner:npg_cJgIFie78oPY@ep-delicate-paper-abr6p1yx.eu-west-2.aws.neon.tech/neondb?sslmode=require&channel_binding=require"
# POSTGRES_URL="postgresql://postgres:root@localhost:5432/postgres"
NEXTAUTH_SECRET="0478866c-92bf-4d84-96af-a51e50986cc0"

--- File: /home/flow/student-dashboard/README.md ---
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.


--- File: /home/flow/student-dashboard/postcss.config.mjs ---
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    '@tailwindcss/postcss': {},
  },
}

export default config


--- File: /home/flow/student-dashboard/eslint.config.mjs ---
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;


--- File: /home/flow/student-dashboard/next.config.ts ---
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  async redirects() {
    return [
      {
        source: '/',
        destination: '/dashboard',
        permanent: true, // Use `true` for permanent 308 redirects
      },
    ];
  },
};

export default nextConfig;


--- File: /home/flow/student-dashboard/tailwind.config.ts ---
import type { Config } from 'tailwindcss'

const config: Config = {
  darkMode: 'class', // Enable dark mode based on class
  content: [
    './src/**/*.{js,ts,jsx,tsx,mdx}',
  ]
}
export default config;


--- File: /home/flow/student-dashboard/src/db/seeders.ts ---


--- File: /home/flow/student-dashboard/src/db/schema.ts ---
import {
  timestamp,
  pgTable,
  text,
  integer,
  serial,
  varchar
} from "drizzle-orm/pg-core"

const timestamps = {
  createdAt: timestamp('created_at').defaultNow(),
  updatedAt: timestamp('updated_at', { mode: 'date', withTimezone: true }).defaultNow().$onUpdate(() => new Date())
};

export const users = pgTable("users", {
  id: serial("id").primaryKey(),
  username: text("username").notNull().unique(),
  password: text("password").notNull(),
  userType: integer("userType").notNull().default(0),
  ...timestamps
})

export const lecturers = pgTable('lecturers', {
  lecturerId: serial("lecturer_id").primaryKey(),
  userId: integer("user_id").references(() => users.id).notNull(),
  ...timestamps
});

export const students = pgTable('students', {
  studentId: serial('student_id').primaryKey(),
  userId: integer('user_id').references(() => users.id),
  matricNo: varchar("matric_no", { length: 50 }).notNull(),
  ...timestamps
});

export const courses = pgTable('courses', {
  courseId: serial("course_id").primaryKey(),
  courseName: text('course_name').notNull(),
  courseCode: text('course_code').notNull().unique(),
  courseDesc: text('course_desc').notNull(),
  courseUnit: integer('course_unit').notNull(),
  semester: integer('semester').notNull(),
  status: varchar('status').notNull(),
  ...timestamps
});

export const lectureSessions = pgTable('lecture_sessions', {
  sessionId: serial("session_id").primaryKey(),
  courseId: integer("course_id").references(() => courses.courseId),
  sessionDatetime: timestamp('session_datetime').defaultNow(),
  duration: integer('duration').notNull(),
  ...timestamps 
});

export const attendanceRecords = pgTable('attendance_records', {
  recordId: serial('record_id').primaryKey(),
  sessionId: integer('session_id').references(() => lectureSessions.sessionId),
  studentId: integer('student_id').references(() => students.studentId),
  attendanceRecord: integer('attendance_record').notNull(),
  markedAt: timestamp('marked_at').defaultNow(),
  ...timestamps
});

export const courseAssignments = pgTable('course_assignments', {
  id: serial('id').primaryKey(),
  lecturerId: integer('lecturer_id').references(() => lecturers.lecturerId),
  courseId: integer('course_id').references(() => courses.courseId),
  ...timestamps
});

export const studentEnrollments = pgTable('student_enrollments', {
  id: serial('id').primaryKey(),
  studentId: integer('student_id').references(() => students.studentId),
  courseId: integer('course_id').references(() => courses.courseId),
  enrollmentDate: timestamp('enrollment_date').defaultNow(),
  enrollmentStatus: varchar('enrollment_status', {length: 30, enum: ["Ongoing", "Completed"]}),
  ...timestamps
});

export const authorizedDevices = pgTable('authorized_devices', {
  deviceId: serial('device_id').primaryKey(),
  studentId: integer('student_id').references(() => students.studentId),
  deviceUUID: varchar('device_uuid', {length: 100}).notNull(),
  deviceType: varchar('device_type', {length: 50, enum:["Laptop", "Phone"]}),
  status: varchar('status', {length: 30}).notNull(),
  authorizedAt: timestamp('authorized_at').defaultNow(),
  ...timestamps
});

export const lecturerDevices = pgTable('lecturer_devices', {
  deviceId: serial('device_id').primaryKey(),
  lecturerId: integer('lecturer_id').references(() => lecturers.lecturerId),
  deviceUUID: varchar('device_uuid', {length: 100}).notNull(),
  deviceType: varchar('device_type', {length: 50, enum:["Laptop", "Phone"]}),
  status: varchar('status', {length: 30}).notNull(),
  ...timestamps
});

export const activities = pgTable('activities', {
  id: serial('id').primaryKey(),
  category: varchar('category', { length: 50 }).notNull(),
  action: text('action').notNull(),
  affectedItem: varchar('affected_item', { length: 100 }),
  details: text('details').notNull(),
  timestamp: timestamp('timestamp').defaultNow(),
  ...timestamps
});

export const attendanceRooms = pgTable('attendance_rooms', {
  id: serial('id').primaryKey(),
  sessionId: integer('session_id').references(() => lectureSessions.sessionId),
  deviceUUID: varchar('device_uuid', {length: 100}).notNull(),
  ...timestamps
});

--- File: /home/flow/student-dashboard/src/db/migrate.ts ---
import { migrate } from "drizzle-orm/postgres-js/migrator";
import { db } from ".";

async function main() {
  console.log("Running migrations...");
  await migrate(db, { migrationsFolder: "drizzle" });
  console.log("Migrations finished.");
  process.exit(0);
}

main().catch((err) => {
  console.error(err);
  process.exit(1);
});


--- File: /home/flow/student-dashboard/src/db/index.ts ---
import { drizzle } from "drizzle-orm/node-postgres";
import { Pool } from "pg";

const pool = new Pool({
  connectionString: process.env.POSTGRES_URL || "",
});

export const db = drizzle(pool);


--- File: /home/flow/student-dashboard/src/components/DeviceList.tsx ---
import React, { useState } from 'react';
import { Device } from '@/data/types/types';

const DeviceList = ({ devices, className }: {devices: Device[], className: string}) => {
  const [expandedDevice, setExpandedDevice] = useState<number|null>(null);
  
  const toggleExpand = (index: number) => {
    setExpandedDevice(expandedDevice === index ? null : index);
  };

  return (
    <div className={`w-full ${className} bg-white dark:bg-gray-900 rounded-xl shadow-lg border border-gray-100 dark:border-gray-700 overflow-hidden`}>
      {devices.length > 0 ? (
        <div className="space-y-4">
          {devices.map((device, index) => (
            <div 
              key={index} 
              className="bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100 border border-border-color dark:border-gray-700 rounded-lg p-4"
            >
              {/* Main info row - always visible */}
              <div className="p-4 flex flex-wrap items-center justify-between">
                <div className="flex items-center space-x-3 w-full sm:w-auto mb-2 sm:mb-0">
                  <div className="flex-shrink-0">
                    {device.type === 'phone' && (
                      <div className="bg-blue-100 p-2 rounded-full">
                        <svg className="h-5 w-5 text-blue-600" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                          <path d="M2 3a1 1 0 011-1h2.153a1 1 0 01.986.836l.74 4.435a1 1 0 01-.54 1.06l-1.548.773a11.037 11.037 0 006.105 6.105l.774-1.548a1 1 0 011.059-.54l4.435.74a1 1 0 01.836.986V17a1 1 0 01-1 1h-2C7.82 18 2 12.18 2 5V3z" />
                        </svg>
                      </div>
                    )}
                    {device.type === 'tablet' && (
                      <div className="bg-purple-100 p-2 rounded-full">
                        <svg className="h-5 w-5 text-purple-600" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                          <path fillRule="evenodd" d="M6 2a2 2 0 00-2 2v12a2 2 0 002 2h8a2 2 0 002-2V4a2 2 0 00-2-2H6zm4 14a1 1 0 100-2 1 1 0 000 2z" clipRule="evenodd" />
                        </svg>
                      </div>
                    )}
                    {device.type === 'laptop' && (
                      <div className="bg-green-100 p-2 rounded-full">
                        <svg className="h-5 w-5 text-green-600" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor">
                          <path fillRule="evenodd" d="M3 5a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm1 3a1 1 0 011-1h12a1 1 0 110 2H5a1 1 0 01-1-1zm1 3a1 1 0 011-1h12a1 1 0 110 2H6a1 1 0 01-1-1z" clipRule="evenodd" />
                        </svg>
                      </div>
                    )}
                  </div>
                  <div>
                    <h3 className="text-sm font-medium text-gray-900 dark:text-gray-100">{device.name}</h3>
                    <p className="text-xs text-gray-500 dark:text-gray-400">#{index + 1} · {device.location}</p>
                  </div>
                </div>

                <div className="flex items-center justify-between w-full space-x-2">
                  <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${device.status === 'online' ? 'bg-green-100 dark:bg-green-900 text-green-800 dark:text-green-200' : 'bg-red-100 dark:bg-red-900 text-red-800 dark:text-red-200'}`}>
                    <span className={`w-2 h-2 mr-1 rounded-full ${device.status === 'online' ? 'bg-green-500 dark:bg-green-300' : 'bg-red-500 dark:bg-red-300'}`}></span>
                    {device.status === 'online' ? 'Online' : 'Offline'}
                  </span>
                  
                  <button
                    onClick={() => toggleExpand(index)}
                    className="ml-2 p-1 rounded-full hover:bg-gray-100 dark:hover:bg-gray-800 focus:outline-none"
                  >
                    <svg 
                      className={`h-5 w-5 text-gray-500 dark:text-gray-300 transition-transform ${expandedDevice === index ? 'transform rotate-180' : ''}`} 
                      xmlns="http://www.w3.org/2000/svg" 
                      viewBox="0 0 20 20" 
                      fill="currentColor"
                    >
                      <path fillRule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clipRule="evenodd" />
                    </svg>
                  </button>
                </div>
              </div>
              
              {/* Expanded section */}
              {expandedDevice === index && (
                <div className="border-t border-gray-200 dark:border-gray-700 bg-gray-50 dark:bg-gray-800 px-4 py-3">
                  <div className="grid grid-cols-1 gap-3">
                    <div>
                      <p className="text-xs font-medium text-gray-500 dark:text-gray-400">Last Seen</p>
                      <p className="text-sm text-gray-700 dark:text-gray-200">
                        {device.lastSeen.toLocaleDateString('en-US', { year: 'numeric', month: 'short', day: 'numeric'}) + " " + 
                        device.lastSeen.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                      </p>
                    </div>
                    
                    <div className="flex space-x-2 pt-2">
                      <button className="px-3 py-1 bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-200 text-xs font-medium rounded">
                        Edit
                      </button>
                      <button className="px-3 py-1 bg-red-100 hover:bg-red-200 text-red-700 text-xs font-medium rounded">
                        Delete
                      </button>
                    </div>
                  </div>
                </div>
              )}
            </div>
          ))}
        </div>
      ) : (
        <div className="text-center py-10 bg-white dark:bg-gray-900 rounded-lg shadow text-gray-900 dark:text-gray-100">
          <p className="text-gray-500">No devices found matching your criteria. Click &lsquo;Add Device&rsquo; to register one.</p>
        </div>
      )}
    </div>
  );
};

export default DeviceList;

--- File: /home/flow/student-dashboard/src/components/CourseList.tsx ---
"use client";
import React, { useState } from 'react';
import { Course } from '@/data/types/types';

const CourseList = ({ courses, className }: {courses: Course[], className?: string}) => {
  const [expandedCourse, setExpandedCourse] = useState<number|null>(null);
  
  const toggleExpand = (index: number) => {
    setExpandedCourse(expandedCourse === index ? null : index);
  };

  return (
    <div className={`${className} w-full bg-white dark:bg-gray-900 rounded-xl shadow-lg border border-gray-100 dark:border-gray-700border-gray-700 overflow-hidden`}>
      {courses.length > 0 ? (
        <div className="divide-y divide-gray-200 dark:divide-gray-700">
          <ul className="bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100 border border-border-color dark:border-gray-700 rounded-lg">
            {courses.map((course, index) => (
              <li 
                key={index}
                className={`${index % 2 === 0 ? 'bg-white dark:bg-gray-900' : 'bg-gray-50 dark:bg-gray-800'}`}
              >
                {/* Course header - always visible */}
                <div 
                  className="p-4 flex items-center justify-between cursor-pointer"
                  onClick={() => toggleExpand(index)}
                >
                  <div className="flex items-center">
                    <span className="flex-shrink-0 w-6 h-6 rounded-full bg-blue-100 dark:bg-blue-900 text-blue-600 dark:text-blue-300 flex items-center justify-center text-xs font-medium mr-3">
                      {index + 1}
                    </span>
                    <div>
                      <h3 className="text-sm font-medium text-gray-900 dark:text-gray-100">{course.name}</h3>
                      <p className="text-xs text-gray-500 dark:text-gray-400 mt-1">{course.credits} Credits</p>
                    </div>
                  </div>
                  
                  <svg 
                    className={`h-5 w-5 text-gray-400 dark:text-gray-300 transition-transform ${expandedCourse === index ? 'transform rotate-180' : ''}`}
                    xmlns="http://www.w3.org/2000/svg" 
                    viewBox="0 0 20 20" 
                    fill="currentColor"
                  >
                    <path fillRule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clipRule="evenodd" />
                  </svg>
                </div>
                
                {/* Expanded course description */}
                {expandedCourse === index && (
                  <div className="px-4 pb-4 pt-1">
                    <div className="bg-gray-100 dark:bg-gray-800 p-3 rounded-lg">
                      <h4 className="text-xs font-medium text-gray-500 dark:text-gray-400 mb-1">Description</h4>
                      <p className="text-sm text-gray-700 dark:text-gray-200">{course.description || "No description available."}</p>
                    </div>
                    
                    <div className="mt-3 flex space-x-2">
                      <button className="px-3 py-1 bg-blue-100 dark:bg-blue-900 hover:bg-blue-200 dark:hover:bg-blue-800 text-blue-700 dark:text-blue-300 text-xs font-medium rounded">
                        View Details
                      </button>
                      <button className="px-3 py-1 bg-gray-200 dark:bg-gray-700 hover:bg-gray-300 dark:hover:bg-gray-600 text-gray-700 dark:text-gray-200 text-xs font-medium rounded">
                        Edit
                      </button>
                    </div>
                  </div>
                )}
              </li>
            ))}
          </ul>
        </div>
      ) : (
        <div className="text-center py-10 text-gray-900 dark:text-gray-100">
          <p className="text-gray-500 dark:text-gray-400">No courses found matching your criteria. Click &lsquo;Add Course&rsquo; to create one.</p>
        </div>
      )}
    </div>
  );
};

export default CourseList;

--- File: /home/flow/student-dashboard/src/components/ThemeProvider.tsx ---
"use client";

import * as React from "react";
import { ThemeProvider as NextThemesProvider } from "next-themes";
import { type ThemeProviderProps } from "next-themes";
import { useTheme } from "next-themes";

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>;
}


--- File: /home/flow/student-dashboard/src/components/Header.tsx ---
"use client";
import Link from "next/link";
import {
  MagnifyingGlassIcon,
  Bars3Icon,
  SunIcon,
  MoonIcon,
} from "@heroicons/react/24/outline";
import { useTheme } from "next-themes";
import { useState, useEffect } from "react";
import { useSession } from "next-auth/react";

type Props = {
  sidebarOpen: boolean;
  setSidebarOpen: (open: boolean) => void;
};

const Header = ({ sidebarOpen, setSidebarOpen }: Props) => {
  const [mounted, setMounted] = useState(false);
  const { theme, setTheme } = useTheme();
  const {data:session, status} = useSession();

  useEffect(() => {
    setMounted(true);
  }, []);

  if (!mounted) {
    return null;
  }

  return (
    <header className="bg-neutral-900 border-b border-neutral-800 py-4 px-6 flex justify-between items-center">
      <div className="flex items-center gap-4">
        <button
          onClick={() => setSidebarOpen(!sidebarOpen)}
          aria-controls="sidebar"
          className="block lg:hidden rounded-full p-1 hover:bg-neutral-800"
        >
          <Bars3Icon className="h-6 w-6 text-neutral-200" />
        </button>
        <h1 className="text-2xl font-bold text-neutral-100">
          Good Morning, {status == 'loading' ? '' : session?.user.name}
        </h1>
      </div>
      <div className="flex items-center gap-4">
        <div className="relative hidden md:block">
          <input
            type="text"
            placeholder="Search..."
            className="pl-10 pr-3 py-2 bg-neutral-800 text-neutral-100 border border-neutral-700 rounded-md focus:ring-2 focus:ring-neutral-600 focus:outline-none placeholder:text-neutral-500 text-sm"
          />
          <MagnifyingGlassIcon className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-neutral-500" />
        </div>
        <button
          onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}
          className="p-2 rounded-full bg-neutral-800 text-neutral-200 hover:bg-neutral-700 transition-colors duration-200"
        >
          {theme === 'dark' ? (
            <SunIcon className="h-6 w-6" />
          ) : (
            <MoonIcon className="h-6 w-6" />
          )}
        </button>
        <div className="w-10 h-10 bg-neutral-800 rounded-full flex items-center justify-center text-neutral-200 font-bold border border-neutral-700">
          S
        </div>
      </div>
    </header>
  );
};

export default Header;


--- File: /home/flow/student-dashboard/src/components/SignupForm.tsx ---
'use client';

import { useState } from 'react';
import { signIn } from 'next-auth/react';
import { useRouter } from 'next/navigation';

export default function SignupForm() {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const router = useRouter();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');

    const result = await signIn('credentials', {
      redirect: false,
      username,
      password,
    });

    if (result?.error) {
      setError(result.error);
    } else {
      router.push('/login');
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <div>
        <label htmlFor="username" className="block text-sm font-medium text-neutral-200 mb-1">Matriculation Number</label>
        <div className="relative mt-1">
          <input
            id="username"
            name="username"
            type="text"
            autoComplete="username"
            required
            value={username}
            onChange={(e) => setUsername(e.target.value)}
            className="input-field pl-10"
          />
          <span className="absolute left-3 top-1/2 -translate-y-1/2 text-neutral-500">
            <svg width="18" height="18" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" strokeWidth="1.5" d="M12 3v18m9-9H3"/></svg>
          </span>
        </div>
      </div>

      <div>
        <label htmlFor="password" className="block text-sm font-medium text-neutral-200 mb-1">Password</label>
        <div className="relative mt-1">
          <input
            id="password"
            name="password"
            type="password"
            autoComplete="current-password"
            required
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            className="input-field pl-10"
          />
          <span className="absolute left-3 top-1/2 -translate-y-1/2 text-neutral-500">
            <svg width="18" height="18" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" strokeWidth="1.5" d="M16.5 10.5V8.25A4.5 4.5 0 0 0 12 3.75a4.5 4.5 0 0 0-4.5 4.5v2.25m9 0H7.5m9 0a2.25 2.25 0 0 1 2.25 2.25v4.5A2.25 2.25 0 0 1 16.5 19.5h-9A2.25 2.25 0 0 1 5.25 17.25v-4.5A2.25 2.25 0 0 1 7.5 10.5m0 0V8.25A4.5 4.5 0 0 1 12 3.75a4.5 4.5 0 0 1 4.5 4.5v2.25"/></svg>
          </span>
        </div>
      </div>

      {error && <p className="text-sm text-red-500 font-medium">{error}</p>}

      <div>
        <button
          type="submit"
          className="w-full text-base px-4 py-2 rounded-lg font-semibold text-white bg-[#F5A623] hover:bg-[#ffb547] focus:outline-none focus:ring-2 focus:ring-[#F5A623] focus:ring-offset-2 transition-colors duration-200"
        >
          Sign up
        </button>
      </div>
    </form>
  );
}


--- File: /home/flow/student-dashboard/src/components/DashboardLayout.tsx ---
"use client";
import Sidebar from "./Sidebar";
import Header from "./Header";
import { useState } from "react";
import { SessionProvider } from "next-auth/react";

const DashboardLayout = ({ children }: { children: React.ReactNode }) => {
  const [sidebarOpen, setSidebarOpen] = useState(false);
  return (
    <SessionProvider>
    <div className="flex h-screen dark:bg-neutral-950">
      <Sidebar sidebarOpen={sidebarOpen} setSidebarOpen={setSidebarOpen} />
      <div className="flex-1 flex flex-col overflow-hidden">
        <Header sidebarOpen={sidebarOpen} setSidebarOpen={setSidebarOpen} />
        <main className="flex-1 p-6 overflow-y-auto dark:bg-neutral-950">
          {children}
        </main>
      </div>
    </div>
    </SessionProvider>
  );
};

export default DashboardLayout;


--- File: /home/flow/student-dashboard/src/components/MainLayoutClientWrapper.tsx ---
"use client";
import Link from "next/link";
import Image from "next/image";
import Logo from "/public/file.svg"; // Make sure this path is correct
import Sidebar from "@/app/Sidebar";

import ThemeToggleButton from "@/app/ThemeToggleButton";
import { Bars3Icon } from "@heroicons/react/24/outline";
import { SessionProvider } from "next-auth/react";
import { ReactNode, useState } from "react";
import { ThemeProvider } from "@/app/ThemeProvider";
import { AuthenticationCheck } from "./AuthenticationCheck";

export default function MainLayoutClientWrapper({ children }: { children: ReactNode }) {
  const [isSidebarOpen, setSidebarOpen] = useState(false);
  return (
    <>
      <ThemeProvider>
        <SessionProvider>
          <AuthenticationCheck />
          <header className="bg-white/90 dark:bg-gray-900/90 backdrop-blur-md flex justify-between shadow-md py-3 px-4 md:px-6 lg:px-8 xl:px-10 border-b border-border-color dark:border-gray-700 fixed top-0 left-0 right-0 z-30">
            {/* Logo Section */}
            <div className="flex items-center">
              <button
                className="md:hidden mr-4"
                onClick={() => setSidebarOpen(!isSidebarOpen)}
              >
                <Bars3Icon className="h-6 w-6" />
              </button>
              <Link
                className="flex items-center"
                href="/"
                aria-label="Go to homepage"
              >
                <Image
                  src={Logo}
                  alt="Attendance System Logo"
                  width={32}
                  height={32}
                  className="mr-2 md:mr-3"
                  priority
                />
                <h1 className="text-xl md:text-2xl font-semibold text-gray-900 dark:text-gray-100 tracking-tight">
                  Attendance System
                </h1>
              </Link>
            </div>

            <div className="flex items-center space-x-4">
              <ThemeToggleButton />
              <div className="flex items-center">
                <Link href="/profile" className="flex items-center">
                  <div className="w-8 h-8 rounded-full bg-green-900/70 text-green-400 flex justify-center items-center mr-2 border border-border-color dark:border-gray-700">
                    <p>J</p>
                  </div>
                </Link>
              </div>
            </div>
          </header>
          <div className="flex h-screen pt-16 bg-background text-foreground">
            <Sidebar
              isOpen={isSidebarOpen}
              onClose={() => setSidebarOpen(false)}
            />
            <main className="flex-1 p-4 md:p-6 lg:p-8 overflow-y-auto">
              {children}
            </main>
          </div>
        </SessionProvider>
      </ThemeProvider>
    </>
  );
}


--- File: /home/flow/student-dashboard/src/components/LoginForm.tsx ---
'use client';

import { useState } from 'react';
import { signIn } from 'next-auth/react';
import { useRouter } from 'next/navigation';

export default function LoginForm() {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const router = useRouter();

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setError('');

    const result = await signIn('credentials', {
      redirect: false,
      username,
      password,
    });

    if (result?.error) {
      setError(result.error);
    } else {
      router.push('/dashboard');
    }
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <div>
        <label htmlFor="username" className="block text-sm font-medium text-neutral-200 mb-1">Matriculation Number</label>
        <div className="relative mt-1">
          <input
            id="username"
            name="username"
            type="text"
            autoComplete="username"
            required
            value={username}
            onChange={(e) => setUsername(e.target.value)}
            className="input-field pl-10"
          />
          <span className="absolute left-3 top-1/2 -translate-y-1/2 text-neutral-500">
            <svg width="18" height="18" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" strokeWidth="1.5" d="M12 3v18m9-9H3"/></svg>
          </span>
        </div>
      </div>

      <div>
        <label htmlFor="password" className="block text-sm font-medium text-neutral-200 mb-1">Password</label>
        <div className="relative mt-1">
          <input
            id="password"
            name="password"
            type="password"
            autoComplete="current-password"
            required
            value={password}
            onChange={(e) => setPassword(e.target.value)}
            className="input-field pl-10"
          />
          <span className="absolute left-3 top-1/2 -translate-y-1/2 text-neutral-500">
            <svg width="18" height="18" fill="none" viewBox="0 0 24 24"><path stroke="currentColor" strokeWidth="1.5" d="M16.5 10.5V8.25A4.5 4.5 0 0 0 12 3.75a4.5 4.5 0 0 0-4.5 4.5v2.25m9 0H7.5m9 0a2.25 2.25 0 0 1 2.25 2.25v4.5A2.25 2.25 0 0 1 16.5 19.5h-9A2.25 2.25 0 0 1 5.25 17.25v-4.5A2.25 2.25 0 0 1 7.5 10.5m0 0V8.25A4.5 4.5 0 0 1 12 3.75a4.5 4.5 0 0 1 4.5 4.5v2.25"/></svg>
          </span>
        </div>
      </div>

      {error && <p className="text-sm text-red-500 font-medium">{error}</p>}

      <div>
        <button
          type="submit"
          className="w-full text-base px-4 py-2 rounded-lg font-semibold text-white bg-[#F5A623] hover:bg-[#ffb547] focus:outline-none focus:ring-2 focus:ring-[#F5A623] focus:ring-offset-2 transition-colors duration-200"
        >
          Sign in
        </button>
      </div>
    </form>
  );
}


--- File: /home/flow/student-dashboard/src/components/PageHeading.tsx ---
const PageHeading = ({ title, description }: { title: string; description?: string }) => (
    <div className="mb-6">
        <h1 className="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-2">{title}</h1>
        {description && <p className="mt-2 text-gray-600 dark:text-gray-300 text-lg">{description}</p>}
    </div>
);

export default PageHeading;


--- File: /home/flow/student-dashboard/src/components/AuthenticationCheck.tsx ---
import { useSession } from "next-auth/react";
import { useRouter } from "next/navigation";
import { useEffect } from "react";

export function AuthenticationCheck() {
    const { data: session, status } = useSession();
    const router = useRouter();

    useEffect(() => {
        if(status == "loading") return;
        if(!session) router.push("/login"); // Redirect if not authenticated
    }, [session, status, router]);

    return (
        <></>
    );
}

--- File: /home/flow/student-dashboard/src/components/Table.tsx ---
// Modified Table Component (components/Table.js - if you want striped rows and no rounded corners *in the table itself*)
import React from 'react';

const Table = ({ headers, rows, emptyMessage, striped = false, roundedCorners = true }: {headers: string[], rows: object[], emptyMessage: string, striped?: boolean, roundedCorners?: boolean}) => { // Added striped and roundedCorners props with defaults
    if (!rows || rows.length === 0) {
        return <div className="bg-white dark:bg-gray-900 rounded-xl shadow-md p-6 text-center text-gray-900 dark:text-gray-100">{emptyMessage}</div>; // Container for empty message
    }

    return (
        <div className={`${roundedCorners ? 'rounded-xl overflow-hidden' : 'overflow-hidden'} w-full bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100`}>
            <table className="min-w-full bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100 border border-border-color dark:border-gray-700">
                <thead className="bg-gray-50 dark:bg-gray-800"> 
                    <tr>
                        {headers.map((header, index) => (
                            <th key={index} scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-300 uppercase tracking-wider">
                                {header}
                            </th>
                        ))}
                    </tr>
                </thead>
                <tbody className="bg-white dark:bg-gray-900 divide-y divide-gray-200 dark:divide-gray-700">
                    {rows.map((row, rowIndex) => (
                        <tr key={rowIndex} className={striped && rowIndex % 2 === 0 ? 'bg-gray-50 dark:bg-gray-800' : ''}> 
                            {Object.values(row).map((cell, cellIndex) => (
                                <td key={cellIndex} className="px-6 py-4 whitespace-nowrap text-sm text-gray-900 dark:text-gray-100">
                                    {cell}
                                </td>
                            ))}
                        </tr>
                    ))}
                </tbody>
            </table>
        </div>
    );
};

export default Table;


--- File: /home/flow/student-dashboard/src/components/Sidebar.tsx ---
import Link from "next/link";
import {
  HomeIcon,
  BookOpenIcon,
  CalendarDaysIcon,
  Cog6ToothIcon,
  UserCircleIcon,
  ArrowLeftEndOnRectangleIcon,
  XMarkIcon,
} from '@heroicons/react/24/outline';
import { usePathname } from "next/navigation";

type Props = {
  sidebarOpen: boolean;
  setSidebarOpen: (open: boolean) => void;
};

const Sidebar = ({ sidebarOpen, setSidebarOpen }: Props) => {
  const pathname = usePathname();
  const navItems = [
    { name: "Dashboard", href: "/dashboard", icon: HomeIcon },
    { name: "Courses", href: "/courses", icon: BookOpenIcon },
    // Removed Schedule, Profile, Settings
  ];

  return (
    <aside
      className={`fixed left-0 top-0 z-40 flex h-screen w-72 flex-col bg-neutral-900 border-r border-neutral-800 shadow-lg transition-transform duration-300 ease-in-out lg:static lg:translate-x-0 ${
        sidebarOpen ? "translate-x-0" : "-translate-x-full"
      }`}
    >
      {/* Logo and Close Button */}
      <div className="flex items-center justify-between gap-2 px-6 py-6 border-b border-neutral-800">
        <Link href="/dashboard" className="flex items-center gap-2">
          <span className="inline-block bg-neutral-800 rounded-full p-2">
            <HomeIcon className="h-7 w-7 text-neutral-200" />
          </span>
          <h1 className="text-2xl font-bold text-neutral-100 tracking-tight">Student Portal</h1>
        </Link>
        <button
          onClick={() => setSidebarOpen(!sidebarOpen)}
          aria-controls="sidebar"
          aria-expanded={sidebarOpen}
          className="block lg:hidden rounded-full p-1 hover:bg-neutral-800"
        >
          <XMarkIcon className="h-7 w-7 text-neutral-400" />
        </button>
      </div>

      {/* Navigation */}
      <nav className="flex-grow overflow-y-auto custom-scrollbar">
        <ul className="mt-6 space-y-1 px-2">
          {navItems.map((item) => (
            <li key={item.name}>
              <Link
                href={item.href}
                className={`group flex items-center gap-3 py-2 px-4 rounded-lg font-medium text-neutral-200 hover:bg-neutral-800 hover:text-white transition-all duration-200 ease-in-out ${
                  pathname === item.href ? "bg-neutral-800 text-white shadow" : ""
                }`}
              >
                <item.icon className="h-6 w-6 text-neutral-400 group-hover:text-white transition-colors duration-200" />
                <span>{item.name}</span>
              </Link>
            </li>
          ))}
        </ul>
      </nav>

      {/* User Profile & Logout */}
      <div className="mt-auto px-6 py-6 border-t border-neutral-800 bg-neutral-900">
        <div className="flex items-center gap-3 mb-4">
          <span className="inline-block bg-neutral-800 rounded-full p-1">
            <UserCircleIcon className="h-9 w-9 text-neutral-300" />
          </span>
          <div>
            <div className="font-semibold text-neutral-100">RUN/CMP/22/20394</div>
            <div className="text-xs text-neutral-400">Student</div>
          </div>
        </div>
        <button
          className="flex items-center gap-3 py-2 px-4 rounded-lg text-neutral-300 hover:bg-neutral-800 hover:text-white transition-all duration-200 w-full font-semibold"
          onClick={() => alert('Logout functionality coming soon!')}
        >
          <ArrowLeftEndOnRectangleIcon className="h-6 w-6 text-neutral-400 group-hover:text-white transition-colors duration-200" />
          <span>Logout</span>
        </button>
      </div>
    </aside>
  );
};

export default Sidebar;


--- File: /home/flow/student-dashboard/src/components/InputField.tsx ---
const InputField = ({
    label,
    value,
    onChange,
    placeholder,
    type = 'text',
    error,
    ...props
}: {
    label: string;
    value: string;
    onChange?: (e: React.ChangeEvent<HTMLInputElement>) => void;
    placeholder?: string;
    type?: 'text' | 'number' | 'email';
    error?: string;
    [key: string]: number | string | object | CallableFunction | undefined;
}) => (
    <div className="mb-4">
        <label className="block text-sm font-medium text-gray-700 dark:text-gray-200 mb-1">{label}</label>
        <input
            type={type}
            value={value}
            onChange={onChange}
            placeholder={placeholder}
            className={`
                bg-white dark:bg-gray-900 border border-border-color dark:border-gray-700
                text-gray-900 dark:text-gray-100
                focus:ring-primary-accent focus:border-primary-accent
                rounded-md p-2
                transition-colors duration-200
                ${error ? 'border-red-500 focus:ring-red-500' : 'border-gray-300 dark:border-gray-700 focus:ring-blue-500 dark:focus:ring-blue-400'}
            `}
            {...props}
        />
        {error && <p className="text-red-500 dark:text-red-400 text-sm mt-1">{error}</p>}
    </div>
);

export default InputField;

--- File: /home/flow/student-dashboard/src/components/Card.tsx ---
import React from 'react';

interface CardProps {
  children: React.ReactNode;
  className?: string;
  onClick?: () => void;
}

const Card: React.FC<CardProps> = ({ children, className, onClick }) => {
  return (
    <div className={`bg-card-background rounded-lg shadow-md p-4 ${className}`} onClick={onClick}>
      {children}
    </div>
  );
};

export default Card;


--- File: /home/flow/student-dashboard/src/components/ActionButton.tsx ---
import { JSX } from "react";

const ActionButton = ({
    onClick,
    icon,
    label,
    variant = 'default',
    className,
    size,
    disabled = false // Add disabled prop
}: {
    onClick?: () => void;
    icon?: React.ReactNode;
    label: JSX.Element | string;
    variant?: 'default' | 'primary' | 'secondary' | 'danger' | 'ghost';
    size?: 'small' | 'medium' | 'large';
    className?: string;
    disabled?: boolean; // Type for disabled prop
}) => {
    const baseClasses = `flex items-center space-x-2 gap-2 px-4 py-2 rounded-md font-medium transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed ${size === 'small' ? 'px-2 py-1 text-sm' : 'px-4 py-2'}`; // Added focus ring offset and disabled styles
    let variantClasses = "";

    switch (variant) {
        case 'primary':
            variantClasses = "bg-primary-accent text-white dark:bg-blue-600 dark:text-gray-100 border border-border-color dark:border-gray-700 hover:bg-blue-700 dark:hover:bg-blue-500hover:bg-blue-500"; // Using primary-accent variable
            break;
        case 'secondary': // New 'secondary' variant
            variantClasses = "bg-secondary-accent text-gray-900 dark:text-gray-900 border border-border-color dark:border-gray-700 hover:bg-yellow-400 dark:hover:bg-yellow-300"; // Example: use secondary color
            break;
        case 'danger':
            variantClasses = "bg-red-500 text-white dark:bg-red-700 dark:text-gray-100 border border-border-color dark:border-gray-700 hover:bg-red-600 dark:hover:bg-red-500";
            break;
        case 'ghost':
            variantClasses = "bg-transparent text-gray-900 dark:text-gray-100 border border-transparent hover:bg-gray-100 dark:hover:bg-gray-800";
            break;
        default:
            variantClasses = "bg-white dark:bg-gray-900 text-gray-900 dark:text-gray-100 border border-border-color dark:border-gray-700 hover:bg-gray-100 dark:hover:bg-gray-800";
    }

    return (
        <button
            onClick={onClick}
            className={`${baseClasses} ${variantClasses} ${className || ''}`}
            disabled={disabled}
        >
            {icon && <span>{icon}</span>}
            {label}
        </button>
    );
};

export default ActionButton;

--- File: /home/flow/student-dashboard/src/components/DashboardCard.tsx ---
const DashboardCard = ({ title, value, icon }: { title: string; value: string | number; icon: React.ReactNode }) => (
    <div className="bg-white dark:bg-gray-900 border border-border-color dark:border-gray-700 text-gray-900 dark:text-gray-100 rounded-lg shadow-md p-4 flex items-center gap-4">
        <div className="flex-shrink-0">
            {icon}
        </div>
        <div>
            <h3 className="text-sm font-semibold text-gray-500 dark:text-gray-400 uppercase tracking-wider">{title}</h3>
            <p className="text-xl font-bold text-gray-900 dark:text-gray-100">{value}</p>
        </div>
    </div>
);

export default DashboardCard;


--- File: /home/flow/student-dashboard/src/components/AddCourseModal.tsx ---
"use client";
import React, { useState } from 'react';
import { XMarkIcon, MagnifyingGlassIcon } from '@heroicons/react/24/outline';

import { CourseOverview } from '../types';

interface AddCourseModalProps {
  isOpen: boolean;
  onClose: () => void;
  courses: CourseOverview[];
  onSelectCourse: (courseId: string) => void;
}

const AddCourseModal: React.FC<AddCourseModalProps> = ({ isOpen, onClose, courses, onSelectCourse }) => {
  const [searchTerm, setSearchTerm] = useState('');

  const filteredCourses = courses.filter(course =>
    course.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    course.id.toLowerCase().includes(searchTerm.toLowerCase())
  );

  if (!isOpen) return null;

  return (
    <div 
      className={`fixed inset-0 z-50 flex justify-center items-center transition-opacity duration-300 ${isOpen ? 'opacity-100' : 'opacity-0'}`}
      onClick={onClose}
    >
      <div className="absolute inset-0 bg-black/30 backdrop-blur-sm"></div>
      <div 
        className={`relative bg-white/10 border border-white/20 rounded-2xl shadow-lg max-w-lg w-full m-4 p-8 text-white transition-transform duration-300 ${isOpen ? 'scale-100' : 'scale-95'}`}
        onClick={e => e.stopPropagation()}
      >
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-3xl font-bold">Select a Course</h2>
          <button onClick={onClose} className="p-2 rounded-full hover:bg-white/20 transition-colors">
            <XMarkIcon className="h-7 w-7" />
          </button>
        </div>

        <div className="space-y-4">
          <div className="relative">
            <input
              type="text"
              placeholder="Search courses..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full pl-10 pr-4 py-3 bg-white/10 rounded-lg border border-white/30 focus:outline-none focus:ring-2 focus:ring-primary-accent"
            />
            <MagnifyingGlassIcon className="absolute left-3 top-1/2 -translate-y-1/2 text-white/60 h-5 w-5" />
          </div>
          <div className="max-h-64 overflow-y-auto">
            {filteredCourses.map(course => (
              <div 
                key={course.id} 
                onClick={() => { onSelectCourse(course.id); onClose(); }}
                className="p-4 rounded-lg hover:bg-white/20 cursor-pointer transition-colors"
              >
                <h3 className="font-semibold">{course.title}</h3>
                <p className="text-sm text-white/80">{course.id} • {course.semester}</p>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
};

export default AddCourseModal;


--- File: /home/flow/student-dashboard/src/components/modals/AddCourseModal.tsx ---
"use client";
import React, { useState } from 'react';
import { XMarkIcon, MagnifyingGlassIcon } from '@heroicons/react/24/outline';

import { CourseOverview } from '@/data/types/types';

interface AddCourseModalProps {
  isOpen: boolean;
  onClose: () => void;
  onAddCourse: (course: CourseOverview) => void;
  courses: CourseOverview[];
  onSelectCourse: (courseId: string) => void;
}

const AddCourseModal: React.FC<AddCourseModalProps> = ({ isOpen, onClose, onAddCourse, courses, onSelectCourse }) => {
  const [mode, setMode] = useState('create'); // 'create' or 'select'
  const [courseName, setCourseName] = useState('');
  const [courseCode, setCourseCode] = useState('');
  const [courseDesc, setCourseDesc] = useState('');
  const [courseUnit, setCourseUnit] = useState('');
  const [searchTerm, setSearchTerm] = useState('');

  const filteredCourses = courses.filter(course =>
    course.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    course.id.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    const newCourse: CourseOverview = {
      id: courseCode,
      name: courseName,
      description: courseDesc,
      credits: parseInt(courseUnit, 10),
      lastAttendance: 'N/A', // Default value
      nextSession: 'N/A', // Default value
      recentSessions: [], // Default empty array
      students: 0, // Default value
      attendanceRate: '0%', // Default value
      semester: 'N/A', // Default value
      title: courseName, // Using courseName as title for now
    };
    onAddCourse(newCourse);
    onClose();
  };

  if (!isOpen) return null;

  return (
    <div 
      className={`fixed inset-0 z-50 flex justify-center items-center transition-opacity duration-300 ${isOpen ? 'opacity-100' : 'opacity-0'}`}
      onClick={onClose}
    >
      <div className="absolute inset-0 bg-black/30 backdrop-blur-sm"></div>
      <div 
        className={`relative bg-white/10 border border-white/20 rounded-2xl shadow-lg max-w-lg w-full m-4 p-8 text-white transition-transform duration-300 ${isOpen ? 'scale-100' : 'scale-95'}`}
        onClick={e => e.stopPropagation()}
      >
        <div className="flex justify-between items-center mb-6">
          <h2 className="text-3xl font-bold">{mode === 'create' ? 'Create a New Course' : 'Select a Course'}</h2>
          <button onClick={onClose} className="p-2 rounded-full hover:bg-white/20 transition-colors">
            <XMarkIcon className="h-7 w-7" />
          </button>
        </div>

        <div className="mb-6">
          <div className="flex bg-white/10 rounded-lg p-1">
            <button 
              onClick={() => setMode('create')}
              className={`w-1/2 py-2 text-sm font-semibold rounded-md transition-colors ${mode === 'create' ? 'bg-primary-accent text-white' : 'text-white/60 hover:bg-white/10'}`}
            >
              Create New
            </button>
            <button 
              onClick={() => setMode('select')}
              className={`w-1/2 py-2 text-sm font-semibold rounded-md transition-colors ${mode === 'select' ? 'bg-primary-accent text-white' : 'text-white/60 hover:bg-white/10'}`}
            >
              Select Existing
            </button>
          </div>
        </div>

        {mode === 'create' ? (
          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div className="relative">
                <input
                  type="text" id="courseName" value={courseName} onChange={(e) => setCourseName(e.target.value)}
                  className="peer w-full px-4 py-3 bg-white/10 rounded-lg border border-white/30 focus:outline-none focus:ring-2 focus:ring-primary-accent placeholder-transparent"
                  placeholder="Course Name" required
                />
                <label htmlFor="courseName" className="absolute left-4 -top-3.5 text-sm text-white/80 transition-all peer-placeholder-shown:text-base peer-placeholder-shown:text-white/60 peer-placeholder-shown:top-3.5 peer-focus:-top-3.5 peer-focus:text-sm peer-focus:text-white/80 bg-card-background px-1">Course Name</label>
              </div>
              <div className="relative">
                <input
                  type="text" id="courseCode" value={courseCode} onChange={(e) => setCourseCode(e.target.value)}
                  className="peer w-full px-4 py-3 bg-white/10 rounded-lg border border-white/30 focus:outline-none focus:ring-2 focus:ring-primary-accent placeholder-transparent"
                  placeholder="Course Code" required
                />
                <label htmlFor="courseCode" className="absolute left-4 -top-3.5 text-sm text-white/80 transition-all peer-placeholder-shown:text-base peer-placeholder-shown:text-white/60 peer-placeholder-shown:top-3.5 peer-focus:-top-3.5 peer-focus:text-sm peer-focus:text-white/80 bg-card-background px-1">Course Code</label>
              </div>
            </div>
            <div className="relative">
              <textarea
                id="courseDesc" value={courseDesc} onChange={(e) => setCourseDesc(e.target.value)}
                className="peer w-full px-4 py-3 bg-white/10 rounded-lg border border-white/30 focus:outline-none focus:ring-2 focus:ring-primary-accent placeholder-transparent"
                rows={4} placeholder="Course Description" required
              ></textarea>
              <label htmlFor="courseDesc" className="absolute left-4 -top-3.5 text-sm text-white/80 transition-all peer-placeholder-shown:text-base peer-placeholder-shown:text-white/60 peer-placeholder-shown:top-3.5 peer-focus:-top-3.5 peer-focus:text-sm peer-focus:text-white/80 bg-card-background px-1">Course Description</label>
            </div>
            <div className="relative">
              <input
                type="number" id="courseUnit" value={courseUnit} onChange={(e) => setCourseUnit(e.target.value)}
                className="peer w-full px-4 py-3 bg-white/10 rounded-lg border border-white/30 focus:outline-none focus:ring-2 focus:ring-primary-accent placeholder-transparent"
                placeholder="Course Unit" required
              />
              <label htmlFor="courseUnit" className="absolute left-4 -top-3.5 text-sm text-white/80 transition-all peer-placeholder-shown:text-base peer-placeholder-shown:text-white/60 peer-placeholder-shown:top-3.5 peer-focus:-top-3.5 peer-focus:text-sm peer-focus:text-white/80 bg-card-background px-1">Course Unit</label>
            </div>
            <div className="flex justify-end space-x-4 pt-4">
              <button type="button" onClick={onClose} className="px-6 py-3 text-sm font-semibold bg-white/10 border border-white/20 rounded-lg hover:bg-white/20 transition-colors">
                Cancel
              </button>
              <button type="submit" className="px-6 py-3 text-sm font-semibold bg-primary-accent text-white rounded-lg hover:bg-primary-accent/90 transition-transform transform hover:scale-105 shadow-lg">
                Create Course
              </button>
            </div>
          </form>
        ) : (
          <div className="space-y-4">
            <div className="relative">
              <input
                type="text"
                placeholder="Search courses..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-3 bg-white/10 rounded-lg border border-white/30 focus:outline-none focus:ring-2 focus:ring-primary-accent"
              />
              <MagnifyingGlassIcon className="absolute left-3 top-1/2 -translate-y-1/2 text-white/60 h-5 w-5" />
            </div>
            <div className="max-h-64 overflow-y-auto">
              {filteredCourses.map(course => (
                <div 
                  key={course.id} 
                  onClick={() => { onSelectCourse(course.id); onClose(); }}
                  className="p-4 rounded-lg hover:bg-white/20 cursor-pointer transition-colors"
                >
                  <h3 className="font-semibold">{course.title}</h3>
                  <p className="text-sm text-white/80">{course.id} • {course.semester}</p>
                </div>
              ))}
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default AddCourseModal;


--- File: /home/flow/student-dashboard/src/components/ui/select.tsx ---
"use client"

import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("py-1.5 pl-8 pr-2 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
}


--- File: /home/flow/student-dashboard/src/components/ui/input.tsx ---
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.InputHTMLAttributes<HTMLInputElement>>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }


--- File: /home/flow/student-dashboard/src/components/ui/label.tsx ---
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }


--- File: /home/flow/student-dashboard/src/lib/utils.ts ---
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


--- File: /home/flow/student-dashboard/src/lib/auth.ts ---
import { getServerSession } from "next-auth/next"
import { authOptions } from "@/app/api/auth/[...nextauth]/route"

export async function getCurrentUser() {
  const session = await getServerSession(authOptions)
  return session?.user
}


--- File: /home/flow/student-dashboard/src/lib/data/reports.ts ---
import { db } from "@/db/index";
import {
  users,
  students,
  courses,
  lectureSessions,
  attendanceRecords,
  studentEnrollments,
} from "@/db/schema";
import { eq, countDistinct, max } from "drizzle-orm";


export async function getCourses({ studentId }: { studentId?: number } = {}) {
  if (studentId) {
    const allCourses = await db
      .select({
        id: courses.courseCode,
        courseId: courses.courseId,
        name: courses.courseName,
        title: courses.courseName,
        description: courses.courseDesc,
        semester: courses.semester,
        status: courses.status,
        students: countDistinct(studentEnrollments.studentId),
        credits: courses.courseUnit,
        activeSessionId: max(lectureSessions.sessionId),
        activeSessionDatetime: max(lectureSessions.sessionDatetime)
      })
      .from(courses)
      .innerJoin(lectureSessions, eq(lectureSessions.courseId, courses.courseId))
      .leftJoin(studentEnrollments, eq(studentEnrollments.courseId, courses.courseId))
      .groupBy(courses.courseCode,
        courses.courseId,
        courses.courseName,
        courses.courseDesc,
        courses.semester,
        courses.status,
        courses.courseUnit,
      )
      .where(eq(studentEnrollments.studentId, studentId));
    return allCourses;
}
  const allCourses = db
    .select({
      id: courses.courseCode,
      name: courses.courseName,
      title: courses.courseName,
      description: courses.courseDesc,
      semester: courses.semester,
      status: courses.status,
      credits: courses.courseUnit
    })
    .from(courses);
  return allCourses;
}

export async function getStudents() {
  const allStudents = await db
    .select({
      studentId: students.studentId,
      username: users.username,
      matricNo: students.matricNo,
    })
    .from(students)
    .leftJoin(users, eq(students.userId, users.id));
  return allStudents;
}


--- File: /home/flow/student-dashboard/src/lib/utils/export.ts ---
// import jsPDF from 'jspdf';
// import 'jspdf-autotable';

// export const exportToCsv = (filename: string, data: unknown[]) => {
//   if (!data || data.length === 0) {
//     console.warn("No data to export to CSV.");
//     return;
//   }

//   const headers = Object.keys(data[0]);
//   const csvRows = [];

//   // Add headers
//   csvRows.push(headers.join(','));

//   // Add data rows
//   for (const row of data) {
//     const values = headers.map(header => {
//       const escaped = ('' + row[header]).replace(/"/g, '""');
//       return `"${escaped}"`;
//     });
//     csvRows.push(values.join(','));
//   }

//   const csvString = csvRows.join('\n');
//   const blob = new Blob([csvString], { type: 'text/csv;charset=utf-8;' });
//   const link = document.createElement('a');
//   if (link.download !== undefined) {
//     const url = URL.createObjectURL(blob);
//     link.setAttribute('href', url);
//     link.setAttribute('download', filename);
//     link.style.visibility = 'hidden';
//     document.body.appendChild(link);
//     link.click();
//     document.body.removeChild(link);
//   }
// };

// export const exportToPdf = (filename: string, title: string, headers: string[], data: (string | number)[][]) => {
//   console.log(headers, data)
//   const doc = new jsPDF();

//   doc.text(title, 14, 16);

//   // (doc as any).autoTable({
//   //   head: [headers],
//   //   body: data,
//   //   startY: 20,
//   //   styles: {
//   //     fontSize: 8,
//   //     cellPadding: 2,
//   //   },
//   //   headStyles: {
//   //     fillColor: [200, 200, 200],
//   //     textColor: [0, 0, 0],
//   //     fontStyle: 'bold',
//   //   },
//   //   alternateRowStyles: {
//   //     fillColor: [240, 240, 240],
//   //   },
//   //   theme: 'grid',
//   // });

//   doc.save(filename);
// };


--- File: /home/flow/student-dashboard/src/data/jsons/devices.json ---
[
    {
        "id": "d1",
        "name": "Device A",
        "location": "Room 101",
        "status": "online"
    },
    {
        "id": "d2",
        "name": "Device B",
        "location": "Lab 202",
        "status": "offline"
    },
    {
        "id": "d3",
        "name": "Device C",
        "location": "Office 301",
        "status": "online"
    }
]

--- File: /home/flow/student-dashboard/src/data/jsons/courses.json ---
[
    {
        "id": "1",
        "name": "Introduction to React",
        "description": "Learn the basics of React",
        "credits": 3
    },
    {
        "id": "2",
        "name": "Advanced JavaScript",
        "description": "Deep dive into JS concepts",
        "credits": 4
    },
    {
        "id": "3",
        "name": "Data Structures",
        "description": "Master fundamental data structures",
        "credits": 3
    }
]

--- File: /home/flow/student-dashboard/src/data/types/types.ts ---
// Dummy data for demonstration
export interface Course {
    id: string;
    title: string;
    name: string;
    description: string;
    credits: number;
    semester: string;
}

export interface Device {
    id: string;
    name: string;
    location: string;
    type: string;
    lastSeen: Date;
    status: string;
}

export interface Room {
    id: string;
    name: string;
    capacity: number;
    availability: string;
    features: string[];
    building: string;
    type: string;
}

export interface Session {
    date: string;
    attendees: number;
    totalStudents: number;
    rate: string;
}

export interface CourseOverview extends Course {
    lastAttendance: string;
    nextSession: string;
    recentSessions: Session[];
    students: number;
    attendanceRate: string;
    semester: string; // Keeping semester for now as it's used in the UI
    title: string; // Keeping title for now as it's used in the UI
}

export interface AttendanceSummaryItem {
    courseCode: string;
    courseName: string;
    totalStudents: number;
    attendanceRate: number;
}

export interface CourseComparisonItem {
    courseCode: string;
    courseName: string;
    attendanceRate: number;
}

export interface StudentInsightItem {
    studentName: string;
    matricNo: string;
    courseCode: string;
    attendanceRate: number;
    lastSession: string;
    totalSessionsAttended: number;
    totalSessions: number;
}

export interface StudentInsightItem2 {
    studentName: string | null;
    matricNo: string;
    courseCode: string | null;
    attendanceRate: number;
    lastSession: string;
    totalSessionsAttended: number;
    totalSessions: number;
}

export interface Student {
    studentId: number;
    username: string;
    matricNo: string;
}


--- File: /home/flow/student-dashboard/src/app/favicon.ico ---
         (  F          (  n  00     (-             F  (                                                           $   ]         ]   $                                                                                       8                                 8                                                                                                               #         OOOggg            #   Y         555            Y               kkk                              			                  Y               JJJkkk                  Y   #               			                  #                      111DDD                                                                                   8                                 8                                                                                       $   ]         ]   $                                                                                                                                                                                                                                                                                    (       @                                                                               ,   U               U   ,                                                                                      *                                       *                                                                                                                                                                             Q                                                         Q                                               r                                                               r                                       r                                                                     r                               O                                                                           O                                                                                                                                                                                                                           (                                                                                       '                             888___                                                 SSS                           +                        hhh                           +   T                        ,,,                           T                              GGG                                                                                                                              +++jjj                                                                                                         T                                 III                                    T   +                                    hhh                                    +                                       ,,,                                                                                  GGG                                                  '                                                                              (                                                   333___                                                                                                                                                                  O                                                                           O                               r                                                                     r                                       r                                                               r                                               Q                                                         Q                                                                                                                                                                             *                                       *                                                                                      ,   U               U   ,                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                               (   0   `           -                                                                                             	   (   L   j               j   K   (   	                                                                                                                                          V                                             U                                                                                                                      %                                                               &                                                                                                                                                                                                                                                                     Q                                                                                 R                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         P                                                                                                                     O                                                                                                                                                                                                                                                                                                                                       #                                                                                                                                 #                                                                                                                                                                                                 $$$hhheeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeePPP                                         U                              sss                                 U                                            eee                                        	                                    HHH                                       	   (                                       EEE                                          (   K                                          ,,,                                          L   j                                          )))                                             j                                                                                                                                             iii                                                                                                   eee                                                                                                   HHH                                                      j                                                   EEE                                                      j   L                                                      ,,,                                                      K   (                                                      )))                                                         (   	                                                                                                                  	                                                             iii                                                                    U                                                         eee                                                         U                                                                    HHH                                                                                                                                    EEE                                                                               #                                                            ,,,                                                            #                                                                                222}}}                                                                                                                                                                                                                                                 O                                                                                                                     P                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                         R                                                                                 Q                                                                                                                                                                                                                                                                     &                                                               %                                                                                                                      U                                             V                                                                                                                                          	   (   K   j               j   L   (   	                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        PNG

   
IHDR         \rf   sRGB    8eXIfMM *    i                              D"8s  IDATx]	ՙn]<QVAh$	N13*qdčIDL2((Ԙ2ęG	q_@屈xțЏ{oU{}O;9d(Dg8	N ]@hx?v 
N3=`;6.&u  6Pн@àR PiZq^DNwp
XhИHg@
:|5` p"@'ɲs{
p*2 d ү|(0
0 >K
xX6 IJ C|?$KEN}ϓ|h $	2 |/ . Nz #We
5
ܶ;y  gsh^  I DL(;8HjgcH|x1R"aӁ G@9`/`%0
H@j~,K
,t).IDTO)~Vu$b 誛
U%7 _$b 8AJ3` 510wQ?vr:2K@ v*{%#AZ咁^(=g \W!:,`6643:@c.Fٟu?<'_܏vp: 8Q
IŁ
p{3kHȢGcѼ
<62&
2uC敭T3

;d/~m.X@{w.d]G {lKEb(PRuMTC
d])_Lm==@bKGUk^U)1gTm`9\Q@Ⱆ6:ڞ^wED 	5F,
X"dm<nB~@ttx
;f>I88C1۪$Be+jlEZ& S::6m\G1`!nllƊ^Q`@OcS@eͷqbpS@upFD@Г2@#L3 A$H2 _hFH#rq(OD򤬈runGOWab &SgD3EDto*Ǥ9k~),$ xR1vK 9D䍁U(w&LEꩻS)3Y8x8 $.i(KŀYa]4ǀ	c@3f4 Ƣ
/*b $!I~7B*-1`	o  	$ǡDL J"OQ)2@#x4"$e I8Oi8" G8[xt<.7&m&؎R^tq ؕ.Y-2 d *_&d|j\Wb G*g 釁F4"I؃/ b1qNYDp9p}w\ Ԥ1 j`OxK=H A1
#
D:U8jt$b bA||UQ26%)1 _
ꢳ!~D +b >A:]E$50GDhRtݻwR)P n$ 3@bSNu,Yjʲ:;@`|-[)'OVՆsFxڮۥn}͛7~ƺ:QJ_UKj8q0x;v4 ̞=[hW=		&!e58hѢEw]6_iW}SZ?	/`;vl}2 <h" A܁X,m۶+V(<w#F^;aHc )S*{apc89(^4&EoÆ
W/u=^*?{k^_Ezg UI-{WU*
:p9.tڷo(/ݺus>3'^RgڞGI_D~~ {
?N07S.ƍ׸~?}/y]nA;أ2 ]FOB2C?_I[::=#OzK- ϣ%?jIPۯ{N-hUt: ,GK-hUchP7 @n?\-k.2: `F=-V_G܂V }0 WIFʭsMrZ8pJQ*@OK8
rZݖa, w SW^y.5at7ݏTv#~7nA"+WpM/hK8gF/^M{e R|)q7t?8'KP~瞰\r>ǷUk eP|^x
/V/v*pv ʟ]J}k8(ĉѣGǗOmڴq,Xoe.^ Qxpt4^_N{y2 s -عsgsivZ
8
!~PJ?c|] ܽ{z긓R1pnztlp9frvjT殿z4*OL~ԕ34~~r;mxY+3 r;mx4:7]ՁqL4)U!r1u6$
78w̙3Ǹ|5>?\zO͆ ,E32[2Wu:E^p.H1cJt]}BuSOuIcO% 
 AZkD?5 @Q
3w+"TSUޥ13?5 M'݋>pZj~fj
׈סԐn> i5D[bf ~a'`Xc -1kāIkQů|kM(92@t݂X-LדaN4qܞ'$f0@
@VnAܘYL9:|/^s 	)0`jT\wuZ-¨\	@:ct{-Rb1% I,Y%T~r1C,$*ˀf<0zhF |8Z-CRTg HRfglYs-p'+m_ؒgC{ 	ȪϏΙ3g-GR|׹7`G񥡘0U_ٵZЏدD)\>ʗz N@~~-P{rs@<|.]Ը|m|g_yWKD1bM%s\r1n\ƒ"- `.4~%3I}[0A$= ->BH"Gۏ^r<EBGi %9@^~~
@1@ t-[{%@C$mAgΚ5kʆх/双OlӿB@.XupO6x9MPn`߷o_^n`t
(\rsAyۂT@h
E0l0;tڵӘkƸNYjU
S#|^㽺- |p
N.ޥ`^{zL64 ěbe]&"dsΜ9UޥU0!
*nP*`o֨vi8Ghhmɓs={JU0ՂwZ8bEz,YD![C>}7:k׮
nof >jvR?#bX(FATFi[{zv>Ca+[0B2D=G~(
ĺLO\s܂>"8|`[)
&Lp8'4 oGe#ۏlْ_\D̀܂2Zli9
tȑ9f ޢ-=Yyn?uQ}XͬsAi >=1=R+ +
܂.2 KCƢۃ20h ˫%535@MA%̣j[9; _(0~r\{mPx#TT9n?N#ץ&} )
TVL!j`p
 8@RrUAVA=-pLH`@n*Ȋ1܂U?}w
 ]H2@ߴiV[˯%5 8)Э
T`|rZbZ-.!da+@ ߞZgf[0p  Igr$o%P_rCy
V|߽"mY-[ lk xA ۯ9][pҤIȨpPk FeِgHEdnAm"Z$5}z82rX| SܻwrJsJ~Tfz{ ͫ xj?jQEn js|Gxз<dXt(QE.p47 );ys_VD-XTi? ~薜 `Q=V?^
.]|X
mB~?J D~h rERA݀B~wqӾ}<ŕ[й5d-`5 ?Kq~l40@)/I(؋n9Y4!Cو2ח*w9GKݐs&res?68J |(uwO䴁d&K)nA?Rn@7,8=renM69kM7JR]en9Z /?នo>󕾤rzr `V{u4448Vrap QRZ<{dK.F9#~Ts.N%* 
Ýu8G&/W:*x%{}@
 lNc#AIi*?د0}gC"Āpۯ4薒ҏ(b8_QY r7'` j 6 *3Wg"l
1:Sg}% 	P?1`Y "D0b@ 9[tF1p`k\U`RA#W81 e`)RZM [uF0	rq. #^=C"Ā9P'R~f 
pnzdC"e?\K@&$b }jz3۵ x/{1 Ra#|ƟUK= &^TMn295)?s{O'DDo [kMoK0x Td_@]b r G; DD1gaR`'`0  >\/fŀ!fnZ|bU.tटr9+	b rnEDk= 8!b RClPE`܌K'~@}*!`@6 L
;	$b@D?#gF
V1v;EsQ=ɮ4b@Tn!3q0^V c 1ܶ[M=8I1@څ@Cu`No WJĀ WeI nNmீܴ_d(4`E܅I "̵1 *3+\E \M)g	r
8>p?vI 0ǀ~!b$'%"IRi1 0? S~& r{ n_L?TeƎ7C"rOQ~"qI O 8?$b ܋r#@_vJ̙/3'd/W[o'N
l-2 @jO~02` H@؄+pOB uO(lSԕ9~c:x/Xd.Ɣd Vy@F $H2 +M*il8O@F $H2 24& r
PO֢7NYS
 Y1`;JS3n g['@W@"la`32n?'HB2p
hāmmu j@F@VZ!xIHyѱ)>Z!6 a`dDV$9f	pM6I!LG:\LdrwPy~P%L37TKAmmo|6	3-h J3?67 yr"g4. $1_[*&S/dqCh 3>6Ŷ%\#RZq
=lK|ŔXXWSe j5 /$:v@8
d1(z2~F)3͋lC#=.\Lt? % N$9b%:2u	 1|-	ldt $b@?@ Fcρ^Dd[9ࠐz:
H@ P2v )~@z5|Rֵ|`#W39؂<"-0\<duoGLz 1Gpe倯d .j
H@jF3@ c{s<J&	@bw   nv< ,M;*p>p!0hH{=x]I DLh<'h8@V #Jf I HnW}Nt[u$ 
@ 2 	]&) #3,	=%Tk&  IIӳ [8		L]]tTg6-@b2 UOV:
 
A?
} .i|	xCrvw; #>i 8_b82 WP  {'n8z;Ƥys @Po|Sih $3@߹j    IENDB`

--- File: /home/flow/student-dashboard/src/app/ThemeProvider.tsx ---
"use client";
import React, { createContext, useContext, useEffect, useState } from "react";

const ThemeContext = createContext({
  theme: "light",
  toggleTheme: () => {},
});

export const useTheme = () => useContext(ThemeContext);

export const ThemeProvider = ({ children }: { children: React.ReactNode }) => {
  const [theme, setTheme] = useState("light");

  useEffect(() => {
    // Check localStorage or system preference
    const stored = typeof window !== "undefined" ? localStorage.getItem("theme") : null;
    if (stored === "dark" || stored === "light") {
      setTheme(stored);
      document.documentElement.setAttribute("data-theme", stored);
    } else {
      const prefersDark = window.matchMedia && window.matchMedia("(prefers-color-scheme: dark)").matches;
      setTheme(prefersDark ? "dark" : "light");
      document.documentElement.setAttribute("data-theme", prefersDark ? "dark" : "light");
    }
  }, []);

  const toggleTheme = () => {
    const newTheme = theme === "light" ? "dark" : "light";
    setTheme(newTheme);
    if (typeof window !== "undefined") {
      localStorage.setItem("theme", newTheme);
      document.documentElement.setAttribute("data-theme", newTheme);
    }
  };

  return (
    <ThemeContext.Provider value={{ theme, toggleTheme }}>
      {children}
    </ThemeContext.Provider>
  );
};


--- File: /home/flow/student-dashboard/src/app/Sidebar.tsx ---
"use client";

import React from "react";
import Link from "next/link";
import {
  HomeIcon,
  BookOpenIcon,
  ChartBarIcon,
  DevicePhoneMobileIcon,
} from "@heroicons/react/24/outline";

interface SidebarProps {
  isOpen: boolean;
  onClose: () => void;
}

const Sidebar: React.FC<SidebarProps> = ({ isOpen, onClose }) => {
  return (
    <>
      {/* Overlay for mobile */}
      {isOpen && (
        <div
          className="fixed inset-0 bg-black/30 z-30 md:hidden"
          onClick={onClose}
        ></div>
      )}
      <aside
        className={`
          bg-white dark:bg-gray-900 border-r border-gray-200 dark:border-gray-700 pt-6
          transition-transform duration-300 ease-in-out
          w-64 flex-shrink-0
          z-40 
          h-full
          overflow-y-auto
          ${isOpen ? "block fixed translate-x-0" : "hidden fixed -translate-x-full"}
          md:block md:relative md:translate-x-0
        `}
      >
        {/* Sidebar content */}
        <div className="px-4 pb-6 md:px-4">
          <div className="mb-4 px-2 py-1 pt-8 md:pt-0">
            <Link
              href="/"
              className="group flex items-center p-2 rounded-md text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-800"
              onClick={onClose}
            >
              <HomeIcon className="mr-2 h-5 w-5 text-gray-500 dark:text-gray-300 transition-colors group-hover:text-primary-accent" />
              <span className="block text-sm font-medium">Home</span>
            </Link>

            <Link
              href="/courses"
              className="group flex items-center p-2 rounded-md text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-800"
              onClick={onClose}
            >
              <BookOpenIcon className="mr-2 h-5 w-5 text-gray-500 dark:text-gray-300 transition-colors group-hover:text-primary-accent" />
              <span className="block text-sm font-medium">Courses</span>
            </Link>

            <Link
              href="/attendance-reports"
              className="group flex items-center p-2 rounded-md text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-800"
              onClick={onClose}
            >
              <ChartBarIcon className="mr-2 h-5 w-5 text-gray-500 dark:text-gray-300 transition-colors group-hover:text-primary-accent" />
              <span className="block text-sm font-medium">Attendance</span>
            </Link>

            <Link
              href="/devices"
              className="group flex items-center p-2 rounded-md text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-800"
              onClick={onClose}
            >
              <DevicePhoneMobileIcon className="mr-2 h-5 w-5 text-gray-500 dark:text-gray-300 transition-colors group-hover:text-primary-accent" />
              <span className="block text-sm font-medium">Devices</span>
            </Link>
          </div>
        </div>
      </aside>
    </>
  );
};

export default Sidebar;


--- File: /home/flow/student-dashboard/src/app/globals.css ---
@import "tailwindcss";
@custom-variant dark (&:where(.dark, .dark *));

:root { /* Light mode defaults */
  --background: #F7F9FA;
  --foreground: #4A4A4A;
  --card: #ffffff;
  --border: #dee2e6;
  --primary-accent: #4A90E2;
  --secondary-accent: #50E3C2;
  --accent: #F5A623;
  --font-family: 'Inter';
}

html {
  color-scheme: light;
}

html.dark { /* Dark mode overrides */
  color-scheme: dark;
  --background: #09090b;
  --foreground: #F3F4F6;
  --card: #18181b;
  --border: #27272a;
}

body {
  font-family: 'Inter', sans-serif;
  background-color: var(--background);
  color: var(--foreground);
  transition: background-color 0.3s ease, color 0.3s ease;
}

@layer components {
  .btn-primary {
    background-image: linear-gradient(to right, var(--primary), var(--secondary));
    color: white;
    font-weight: 600; /* Semi-bold */
    padding: 0.75rem 1.5rem;
    border-radius: 0.75rem; /* More rounded */
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
    transition: all 0.3s ease-in-out;
    border: none;
    cursor: pointer;
  }

  .btn-primary:hover {
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 8px 10px -6px rgba(0, 0, 0, 0.05);
    transform: translateY(-3px);
  }

  .btn-secondary {
    background-color: var(--border);
    color: var(--foreground);
    font-weight: 600; /* Semi-bold */
    padding: 0.75rem 1.5rem;
    border-radius: 0.75rem; /* More rounded */
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -2px rgba(0, 0, 0, 0.05);
    transition: all 0.3s ease-in-out;
    border: none;
    cursor: pointer;
  }

  .btn-secondary:hover {
    background-color: #D1D5DB; /* Gray 300 */
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -4px rgba(0, 0, 0, 0.05);
    transform: translateY(-2px);
  }

  html.dark .btn-secondary:hover {
    background-color: #4B5563; /* Gray 600 */
  }

  .input-field {
    display: block;
    width: 100%;
    padding: 0.5rem 1rem; /* py-2 px-4 */
    border: 1px solid var(--border); /* border border-gray-300 */
    border-radius: 0.5rem; /* rounded-lg */
    background-color: var(--card); /* bg-white */
    color: var(--foreground); /* text-gray-900 */
    transition: all 0.2s ease-in-out; /* transition-all duration-200 ease-in-out */
    outline: none; /* outline-none */
  }

  html.dark .input-field {
    border-color: var(--border); /* dark:border-gray-600 */
    background-color: var(--card); /* dark:bg-gray-700 */
    color: var(--foreground); /* dark:text-white */
  }

  .input-field::placeholder {
    color: #9CA3AF; /* placeholder-gray-400 */
    opacity: 1;
  }

  html.dark .input-field::placeholder {
    color: #A3A3A3; /* lighter gray for dark bg */
    opacity: 1;
  }

  .input-field:focus {
    box-shadow: 0 0 0 2px var(--primary); /* focus:ring-2 focus:ring-primary */
    border-color: transparent; /* focus:border-transparent */
  }

  .card {
    background-color: var(--card); /* bg-white */
    border-radius: 0.75rem; /* rounded-xl */
    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05); /* shadow-lg */
    border: 1px solid var(--border); /* border border-gray-200 */
    color: var(--foreground);
  }

  html.dark .card {
    background-color: var(--card); /* dark:bg-gray-800 */
    border-color: var(--border); /* dark:border-gray-700 */
    color: var(--foreground);
  }
}


--- File: /home/flow/student-dashboard/src/app/layout.tsx ---
import type { Metadata } from "next";
import { Inter, Poppins } from "next/font/google";
import "./globals.css";
import { ThemeProvider } from "@/components/ThemeProvider";

const inter = Inter({ subsets: ["latin"], variable: "--font-inter" });

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};


export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body className={`${inter.className} font-sans antialiased`}>
        <ThemeProvider
          attribute="class"
          defaultTheme="system"
          enableSystem
          disableTransitionOnChange
        >
          {children}
        </ThemeProvider>
      </body>
    </html>
  );
}


--- File: /home/flow/student-dashboard/src/app/ThemeToggleButton.tsx ---
"use client";
import React from "react";
import { useTheme } from "./ThemeProvider";

const ThemeToggleButton = () => {
  const { theme, toggleTheme } = useTheme();
  return (
    <button
      onClick={toggleTheme}
      className="ml-2 px-2 py-1 rounded-md border border-border-color bg-gray-900 hover:bg-gray-200 text-gray-700 focus:outline-none focus:ring-2 focus:ring-primary-accent transition"
      aria-label="Toggle theme"
      type="button"
    >
      {theme === "dark" ? "🌙" : "☀️"}
    </button>
  );
};

export default ThemeToggleButton;


--- File: /home/flow/student-dashboard/src/app/login/page.tsx ---
import LoginForm from '@/components/LoginForm';
import Link from 'next/link';

export default function LoginPage() {
  return (
    <div className="flex min-h-screen flex-col justify-center bg-neutral-950 py-12 sm:px-6 lg:px-8">
      <div className="sm:mx-auto sm:w-full sm:max-w-md">
        <h2 className="mt-6 text-center text-3xl font-bold text-neutral-100">
          Sign in to your account
        </h2>
        <p className="mt-2 text-center text-sm text-neutral-400">
          Or{' '}
          <Link
            href="/signup"
            className="font-medium text-neutral-200 underline hover:text-white transition-colors"
          >
            create a new account
          </Link>
        </p>
      </div>

      <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
        <div className="bg-neutral-900 py-8 px-4 shadow-lg rounded-2xl sm:px-10 border border-neutral-800">
          <LoginForm />
        </div>
      </div>
    </div>
  );
}


--- File: /home/flow/student-dashboard/src/app/api/route.ts ---
import { NextRequest, NextResponse } from "next/server";

export async function GET(request: NextRequest) {
    const req = request.url;
    console.log(req);
    const result = null;
    return NextResponse.json(JSON.stringify(result));
}

--- File: /home/flow/student-dashboard/src/app/api/device/validate/route.ts ---
import { NextResponse } from 'next/server';
import { createCanvas, loadImage } from 'canvas';

export async function POST(req: Request) {
  const formData = await req.formData();
  const file = formData.get('image') as File;
  if (!file) return NextResponse.json({ valid: false }, { status: 400 });

  const arrayBuffer = await file.arrayBuffer();
  const buffer = Buffer.from(arrayBuffer);

  const img = await loadImage(buffer);
  const canvas = createCanvas(img.width, img.height);
  const ctx = canvas.getContext('2d');
  ctx.drawImage(img, 0, 0);
  const imgData = ctx.getImageData(0, 0, img.width, img.height);

  let hex = '';
  for (let i = 0; i < 16; i++) {
    hex += imgData.data[i * 4].toString(16).padStart(2, '0');
  }
  const uuid = `${hex.slice(0,8)}-${hex.slice(8,12)}-${hex.slice(12,16)}-${hex.slice(16,20)}-${hex.slice(20,32)}`;
  const uuidRegex = /^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$/;
  const valid = uuidRegex.test(uuid);

  return NextResponse.json({ valid, uuid: valid ? uuid : null });
}


--- File: /home/flow/student-dashboard/src/app/api/device/authorize/route.ts ---
import { NextRequest, NextResponse } from 'next/server';
import { v4 as uuidv4 } from 'uuid';
import { createCanvas } from 'canvas';
import { db } from '@/db';
import { authorizedDevices } from '@/db/schema';

export async function GET(request: NextRequest) {
    const etag = new Date().toISOString();
    if (request.headers.get("If-None-Match") == etag) {
        return new NextResponse(null, { status: 304 });
    }
    const uuid = uuidv4();
    const hex = uuid.replace(/-/g, '');
    const bytes = [];
    for (let i = 0; i < hex.length; i += 2) {
        bytes.push(parseInt(hex.slice(i, i + 2), 16));
    }
    const width = 16, height = 1;
    const canvas = createCanvas(width, height);
    const ctx = canvas.getContext('2d');
    const imgData = ctx.createImageData(width, height);
    for (let i = 0; i < 16; i++) {
        imgData.data[i * 4 + 0] = bytes[i]; // R
        imgData.data[i * 4 + 1] = 0;       // G
        imgData.data[i * 4 + 2] = 0;       // B
        imgData.data[i * 4 + 3] = 255;     // A
    }
    ctx.putImageData(imgData, 0, 0);
    const image = canvas.toDataURL();

    // Insert into authorizedDevices (dummy studentId=1, deviceType='Laptop', status='active')
    try {
        await db.insert(authorizedDevices).values({
            studentId: 1,
            deviceUUID: uuid,
            deviceType: 'Laptop',
            status: 'active',
        });
    } catch (e) {
        // Ignore DB errors for duplicate UUIDs, etc.
    }

    return NextResponse.json({ uuid, image }, {
        status: 200,
        headers: { 'ETag': etag },
    });
}


--- File: /home/flow/student-dashboard/src/app/api/attendance/mark/route.ts ---
import { NextResponse } from 'next/server';
import { db } from '@/db';
import { and, eq } from 'drizzle-orm';
import { attendanceRecords, authorizedDevices, students } from '@/db/schema';

export async function POST(req: Request) {
    try {
        const { uuid, sessionId } = await req.json();
        if (!uuid || !sessionId) {
            return NextResponse.json({ success: false, error: 'Missing uuid or sessionId' }, { status: 400 });
        }
        const student = await db.select().from(students).leftJoin(authorizedDevices, eq(students.studentId, authorizedDevices.studentId))
                                            .where(eq(authorizedDevices.deviceUUID, uuid)).limit(1);
        if (!student.length) {
            return NextResponse.json({ success: false, error: 'Student not found' }, { status: 404 });
        }

        const studentId = student[0].students.studentId;

        // Check if attendance has already been marked
        const existingRecord = await db.select().from(attendanceRecords)
            .where(and(eq(attendanceRecords.sessionId, sessionId), eq(attendanceRecords.studentId, studentId)))
            .limit(1);

        if (existingRecord.length > 0) {
            return NextResponse.json({ success: false, error: 'Attendance already marked' }, { status: 409 });
        }

        // Insert attendance record
        await db.insert(attendanceRecords).values({
            sessionId: sessionId,
            studentId: studentId,
            attendanceRecord: 1, // 1 = present
        });

        return NextResponse.json({ success: true });
    } catch (e) {
        return NextResponse.json({ success: false, error: 'Server error' }, { status: 500 });
    }
}


--- File: /home/flow/student-dashboard/src/app/api/attendance-rooms/route.ts ---
import { db } from "@/db";
import { eq } from "drizzle-orm";
import { attendanceRooms } from "@/db/schema";
import { NextRequest, NextResponse } from "next/server";

export async function POST(request: NextRequest){
    const {sessionId} = await request.json();
    const rooms = await db.select().from(attendanceRooms).where(eq(attendanceRooms.sessionId, sessionId));
    return NextResponse.json({rooms: rooms.map(room => room.deviceUUID)});
}

--- File: /home/flow/student-dashboard/src/app/api/attendance-summary/route.ts ---
import { NextResponse } from 'next/server';
import { db } from '@/db';
import { attendanceRooms, lectureSessions, courses } from '@/db/schema';
import { eq } from 'drizzle-orm';

export async function GET(request: Request) {
  const { searchParams } = new URL(request.url);
  const attendID = searchParams.get('attendID');

  if (!attendID) {
    return NextResponse.json({ error: 'Missing attendID' }, { status: 400 });
  }

  try {
    const roomData = await db.select().from(attendanceRooms).where(eq(attendanceRooms.sessionId, parseInt(attendID))).limit(1);
    if (roomData.length === 0) {
      return NextResponse.json({ error: 'Room not found' }, { status: 404 });
    }
    const room = roomData[0];

    if (!room.sessionId) {
      return NextResponse.json({ error: 'Room is not associated with a session' }, { status: 404 });
    }

    const sessionData = await db.select().from(lectureSessions).where(eq(lectureSessions.sessionId, room.sessionId)).limit(1);
    if (sessionData.length === 0) {
        return NextResponse.json({ error: 'Session not found' }, { status: 404 });
    }
    const session = sessionData[0];

    if (!session.courseId) {
        return NextResponse.json({ error: 'Session is not associated with a course' }, { status: 404 });
    }

    const courseData = await db.select().from(courses).where(eq(courses.courseId, session.courseId)).limit(1);
    if (courseData.length === 0) {
        return NextResponse.json({ error: 'Course not found' }, { status: 404 });
    }
    const course = courseData[0];
    const roomStatus = 'open';

    return NextResponse.json({ 
        room: { id: room.id, name: course.courseName, status: roomStatus },
        session: { id: session.sessionId, name: course.courseName, time: session.sessionDatetime, status: 'ongoing' }
    });
  } catch (error) {
    console.error('Error fetching attendance summary:', error);
    return NextResponse.json({ error: 'Internal Server Error' }, { status: 500 });
  }
}


--- File: /home/flow/student-dashboard/src/app/api/students/route.ts ---
import { getStudents } from "@/lib/data/reports";
import { NextRequest, NextResponse } from "next/server";

export async function GET(request: NextRequest){
    console.log(request)
    const students = await getStudents();
    console.log(students);
    return NextResponse.json(students || []);
}


--- File: /home/flow/student-dashboard/src/app/api/auth/[...nextauth]/route.ts ---
import NextAuth, { AuthOptions, User } from "next-auth";
import CredentialsProvider from "next-auth/providers/credentials";
import { db } from "@/db";
import { users } from "@/db/schema";
import { eq } from "drizzle-orm";
import bcrypt from "bcryptjs";

export const authOptions: AuthOptions = {
  pages: {
    signIn: "/login",
  },
  providers: [
    CredentialsProvider({
      name: "Credentials",
      credentials: {
        username: { label: "Username", type: "text" },
        password: { label: "Password", type: "password" },
      },
      async authorize(credentials): Promise<User | null> {
        if (!credentials?.username || !credentials?.password) {
          return null;
        }

        const user = (
          await db
            .select()
            .from(users)
            .where(eq(users.username, credentials.username))
        )[0];

        if (!user) {
          const hashedPassword = await bcrypt.hash(credentials.password, 10);
          await db.insert(users).values({
            username: credentials.username,
            password: hashedPassword,
          });
          const newUser = (
            await db
              .select()
              .from(users)
              .where(eq(users.username, credentials.username))
          )[0];
          return {
            id: "dummy-id",
            name: newUser.username,
            email: newUser.username,
          };
        }

        const isPasswordValid = await bcrypt.compare(
          credentials.password,
          user.password
        );

        if (!isPasswordValid) {
          return null;
        }

        return {
          id: "dummy-id",
          name: user.username,
          email: user.username,
        };
      },
    }),
  ],
  secret: process.env.NEXTAUTH_SECRET,
};

const handler = NextAuth(authOptions);

export { handler as GET, handler as POST };


--- File: /home/flow/student-dashboard/src/app/api/courses/route.ts ---
import { NextResponse, NextRequest } from 'next/server';
import { getCourses } from '@/lib/data/reports';

export async function GET(request: NextRequest){
    const searchParams = request.nextUrl.searchParams;
    const isAll = searchParams.get('isAll');
    const studentId = 22;
    let courses = null;
    if(isAll){
        courses = await getCourses();
    }else{
        courses = await getCourses({studentId: studentId});
    }
    return NextResponse.json(courses || []);
}

--- File: /home/flow/student-dashboard/src/app/api/courses/add/route.ts ---
import { db } from "@/db";
import { courses, studentEnrollments } from "@/db/schema";
import {eq} from "drizzle-orm";
import { NextRequest, NextResponse } from "next/server";

export async function POST(request: NextRequest){
    const {courseId} = await request.json();
    const course = await db.select().from(courses).where(eq(courses.courseCode, courseId)).limit(1);

    if(!course || course.length === 0){
        return NextResponse.json({ error: "Course not found" }, { status: 404 });
    }

    const courseItem = course[0];

    await db.insert(studentEnrollments).values({
        studentId: 22,
        courseId: courseItem.courseId,
    });
    return NextResponse.json({ success: true }, {status: 200});
}

--- File: /home/flow/student-dashboard/src/app/api/courses/[courseId]/route.ts ---
import { NextResponse, NextRequest } from 'next/server';
import { db } from "@/db/index";
import { courses, lectureSessions, attendanceRecords, studentEnrollments } from "@/db/schema";
import { and, eq, sql, countDistinct, max, desc } from "drizzle-orm";

export async function GET(request: NextRequest, { params }: { params: Promise<{ courseId: string }> }) {
    const courseId = (await params).courseId;

    try {
        const courseDetails = await db.select({
            courseId: courses.courseId,
            courseName: courses.courseName,
            courseCode: courses.courseCode,
            courseDesc: courses.courseDesc,
            courseUnit: courses.courseUnit,
            semester: courses.semester,
            students: countDistinct(studentEnrollments.studentId),
        })
        .from(courses)
        .leftJoin(studentEnrollments, eq(studentEnrollments.courseId, courses.courseId))
        .where(eq(courses.courseCode, courseId))
        .groupBy(courses.courseId);

        if (courseDetails.length === 0) {
            return NextResponse.json({ error: 'Course not found' }, { status: 404 });
        }

        const attendanceRateResult = await db.select({
            attendanceRate: sql<number>`avg(${attendanceRecords.attendanceRecord}) * 100`,
        })
        .from(attendanceRecords)
        .leftJoin(lectureSessions, eq(attendanceRecords.sessionId, lectureSessions.sessionId))
        .where(eq(lectureSessions.courseId, courseDetails[0].courseId));

        const lastAttendanceResult = await db.select({
            lastAttendance: max(lectureSessions.sessionDatetime),
        })
        .from(lectureSessions)
        .where(eq(lectureSessions.courseId, courseDetails[0].courseId));

        const nextSessionResult = await db.select({
            nextSession: lectureSessions.sessionDatetime,
        })
        .from(lectureSessions)
        .where(and(eq(lectureSessions.courseId, courseDetails[0].courseId), sql`${lectureSessions.sessionDatetime} > NOW()`))
        .orderBy(lectureSessions.sessionDatetime)
        .limit(1);

        const recentSessionsResult = await db.select({
            date: lectureSessions.sessionDatetime,
            attendees: countDistinct(attendanceRecords.studentId),
            totalStudents: sql<number>`(SELECT count(*) FROM ${studentEnrollments} WHERE ${studentEnrollments.courseId} = ${courseDetails[0].courseId})`,
            rate: sql<string>`(CAST(count(DISTINCT ${attendanceRecords.studentId}) AS REAL) / (SELECT count(*) FROM ${studentEnrollments} WHERE ${studentEnrollments.courseId} = ${courseDetails[0].courseId}) * 100) || '%'`,
        })
        .from(lectureSessions)
        .leftJoin(attendanceRecords, eq(lectureSessions.sessionId, attendanceRecords.sessionId))
        .where(eq(lectureSessions.courseId, courseDetails[0].courseId))
        .groupBy(lectureSessions.sessionId)
        .orderBy(desc(lectureSessions.sessionDatetime))
        .limit(3);

        const course = {
            ...courseDetails[0],
            title: courseDetails[0].courseName,
            attendanceRate: Number(attendanceRateResult[0]?.attendanceRate).toFixed(2) + '%' || 'N/A',
            lastAttendance: lastAttendanceResult[0]?.lastAttendance || 'N/A',
            nextSession: nextSessionResult[0]?.nextSession || 'N/A',
            recentSessions: recentSessionsResult,
        };

        return NextResponse.json(course);
    } catch (error) {
        console.error('Error fetching course details:', error);
        return NextResponse.json({ error: 'Internal server error' }, { status: 500 });
    }
}


--- File: /home/flow/student-dashboard/src/app/api/dashboard/route.ts ---
import { NextResponse } from 'next/server';
import { db } from '@/db';
import { and, eq, count } from 'drizzle-orm';
import { attendanceRecords, lectureSessions, courses, students, authorizedDevices, users } from '@/db/schema';
import { getCurrentUser } from '@/lib/auth';

export async function GET() {
    try {
        const user = await getCurrentUser();
        if (!user || !user.name) {
            return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
        }

        const studentQuery = await db.select().from(students).innerJoin(users, eq(students.userId, users.id)).where(eq(users.username, "Blake80")).limit(1);
        if (!studentQuery.length) {
            return NextResponse.json({ error: 'Student not found' }, { status: 404 });
        }
        const student = studentQuery[0].students;
        const studentId = student.studentId;

        const totalClassesResult = await db.select({ value: count() }).from(lectureSessions);
        const attendedClassesResult = await db.select({ value: count() }).from(attendanceRecords).where(and(eq(attendanceRecords.studentId, studentId), eq(attendanceRecords.attendanceRecord, 1)));

        const total = totalClassesResult[0].value;
        const attended = attendedClassesResult[0].value;
        const missed = total - attended;
        const attendanceRate = total > 0 ? (attended / total) * 100 : 0;

        const attendanceStats = [
            { label: "Total Classes", value: total },
            { label: "Attended", value: attended },
            { label: "Missed", value: missed },
            { label: "Attendance Rate", value: `${attendanceRate.toFixed(0)}%` },
        ];

        const upcomingSessions = await db.select().from(lectureSessions)
            .leftJoin(courses, eq(lectureSessions.courseId, courses.courseId))
            .orderBy(lectureSessions.sessionDatetime)
            .limit(2);

        const attendanceNotifications = upcomingSessions.map(s => ({
            message: `You have an attendance session in ${s.courses?.courseName}`,
            time: new Date(s.lecture_sessions.sessionDatetime || "").toLocaleTimeString()
        }));

        const attendanceHistory = await db.select().from(attendanceRecords)
            .leftJoin(lectureSessions, eq(attendanceRecords.sessionId, lectureSessions.sessionId))
            .leftJoin(courses, eq(lectureSessions.courseId, courses.courseId))
            .where(eq(attendanceRecords.studentId, studentId))
            .orderBy(lectureSessions.sessionDatetime)
            .limit(4);

        const attendanceActivity = attendanceHistory.map(h => ({
            detail: `${h.attendance_records.attendanceRecord === 1 ? 'Marked present in' : 'Missed class in'} ${h.courses?.courseName}`,
            time: `${new Date(h.lecture_sessions?.sessionDatetime || "").toDateString()}, ${new Date(h.lecture_sessions?.sessionDatetime || "").toLocaleTimeString()}`
        }));

        const authorizedDevice = await db.select().from(authorizedDevices).where(eq(authorizedDevices.studentId, studentId)).limit(1);

        return NextResponse.json({
            userName: user.name,
            attendanceStats,
            attendanceNotifications,
            attendanceActivity,
            deviceInfo: authorizedDevice.length > 0 ? {
                name: authorizedDevice[0].deviceType,
                id: authorizedDevice[0].deviceUUID,
                lastActive: new Date(authorizedDevice[0].updatedAt || "").toLocaleString()
            } : null
        });

    } catch (error) {
        console.error(error);
        return NextResponse.json({ error: 'Server error' }, { status: 500 });
    }
}


--- File: /home/flow/student-dashboard/src/app/(main)/layout.tsx ---
import DashboardLayout from "@/components/DashboardLayout";

export default function Layout({ children }: { children: React.ReactNode }) {
  return <DashboardLayout>{children}</DashboardLayout>;
}

--- File: /home/flow/student-dashboard/src/app/(main)/page.tsx ---
import {
  UserIcon,
  ClipboardDocumentIcon,
  DevicePhoneMobileIcon,
  CheckCircleIcon,
  PlusIcon,
  ExclamationTriangleIcon,
  EyeIcon,
} from "@heroicons/react/24/outline";
import Link from "next/link";
import Card from "@/components/Card";


export default function HomePage() {
  return (
    <div className="flex-1 overflow-auto">
      <div className="p-6 sm:p-8">
        <h1 className="text-3xl font-bold text-foreground mb-8">Dashboard</h1>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8 mb-8">
          <Card className="border-l-4 border-primary-accent">
            <div className="flex justify-between items-start">
              <div>
                <p className="text-sm text-foreground/80 mb-1">Total Students</p>
                <h3 className="text-2xl font-bold">248</h3>
                <p className="text-xs text-green-500 mt-1">
                  +12% from last semester
                </p>
              </div>
              <div className="p-2 bg-primary-accent/10 rounded-lg">
                <UserIcon className="h-6 w-6 text-primary-accent" />
              </div>
            </div>
          </Card>

          <Card className="border-l-4 border-secondary-accent">
            <div className="flex justify-between items-start">
              <div>
                <p className="text-sm text-foreground/80 mb-1">Average Attendance</p>
                <h3 className="text-2xl font-bold">82%</h3>
                <p className="text-xs text-red-500 mt-1">-3% from last month</p>
              </div>
              <div className="p-2 bg-secondary-accent/10 rounded-lg">
                <ClipboardDocumentIcon className="h-6 w-6 text-secondary-accent" />
              </div>
            </div>
          </Card>

          <Card className="border-l-4 border-accent">
            <div className="flex justify-between items-start">
              <div>
                <p className="text-sm text-foreground/80 mb-1">Connected Devices</p>
                <h3 className="text-2xl font-bold">24</h3>
                <p className="text-xs text-accent mt-1">
                  All devices online
                </p>
              </div>
              <div className="p-2 bg-accent/10 rounded-lg">
                <DevicePhoneMobileIcon className="h-6 w-6 text-accent" />
              </div>
            </div>
          </Card>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8 mb-8">
          <Card className="lg:col-span-2">
            <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-4">
              <h3 className="text-lg font-semibold mb-2 sm:mb-0">
                Attendance Trend
              </h3>
              <div className="flex items-center space-x-2">
                <button className="text-xs sm:text-sm text-primary-accent hover:underline border-0 bg-primary-accent/20 px-2 py-1 rounded">
                  Weekly
                </button>
                <button className="text-xs sm:text-sm text-primary-accent hover:underline border-0 bg-primary-accent/20 px-2 py-1 rounded">
                  Monthly
                </button>
                <button className="text-xs sm:text-sm text-primary-accent hover:underline border-0 bg-primary-accent/20 px-2 py-1 rounded">
                  Semester
                </button>
              </div>
            </div>
            <div className="h-64 bg-background rounded flex items-center justify-center">
              <p className="text-foreground/60">Attendance chart visualization</p>
            </div>
          </Card>
        </div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          <Card className="lg:col-span-2">
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-semibold">Recent Activities</h3>
              <Link
                href="/activities"
                className="text-primary-accent hover:underline text-sm font-medium"
              >
                View all
              </Link>
            </div>
            <ul className="divide-y divide-border-color">
              <li className="py-3 flex items-start">
                <div className="bg-green-500/10 p-2 rounded-full mr-4">
                  <CheckCircleIcon className="h-5 w-5 text-green-500" />
                </div>
                <div>
                  <p className="font-medium">Attendance recorded for CS101</p>
                  <p className="text-sm text-foreground/80">
                    42 students present • 10:15 AM
                  </p>
                </div>
              </li>
              <li className="py-3 flex items-start">
                <div className="bg-primary-accent/10 p-2 rounded-full mr-4">
                  <PlusIcon className="h-5 w-5 text-primary-accent" />
                </div>
                <div>
                  <p className="font-medium">New device registered</p>
                  <p className="text-sm text-foreground/80">
                    Device ID: TAB-247 • 9:30 AM
                  </p>
                </div>
              </li>
              <li className="py-3 flex items-start">
                <div className="bg-secondary-accent/10 p-2 rounded-full mr-4">
                  <ExclamationTriangleIcon className="h-5 w-5 text-secondary-accent" />
                </div>
                <div>
                  <p className="font-medium">Low attendance alert</p>
                  <p className="text-sm text-foreground/80">
                    MATH202 - 65% attendance • Yesterday
                  </p>
                </div>
              </li>
              <li className="py-3 flex items-start">
                <div className="bg-accent/10 p-2 rounded-full mr-4">
                  <EyeIcon className="h-5 w-5 text-accent" />
                </div>
                <div>
                  <p className="font-medium">Attendance report generated</p>
                  <p className="text-sm text-foreground/80">
                    Mid-semester report • Yesterday
                  </p>
                </div>
              </li>
            </ul>
          </Card>

          <Card>
            <div className="flex justify-between items-center mb-4">
              <h3 className="text-lg font-semibold">Upcoming Classes</h3>
              <Link
                href="/schedule"
                className="text-primary-accent hover:underline text-sm font-medium"
              >
                View schedule
              </Link>
            </div>
            <ul className="divide-y divide-border-color">
              <li className="py-3 flex justify-between items-center">
                <div className="flex items-center">
                  <div className="mr-4 h-12 w-12 bg-primary-accent rounded-lg flex items-center justify-center text-white">
                    <span className="font-semibold">CS</span>
                  </div>
                  <div>
                    <p className="font-medium">Computer Science 202</p>
                    <p className="text-sm text-foreground/80">
                      10:00 AM - 11:30 AM
                    </p>
                  </div>
                </div>
                <span className="bg-green-500/10 text-green-500 text-xs px-2 py-1 rounded-full">
                  Ready
                </span>
              </li>
              <li className="py-3 flex justify-between items-center">
                <div className="flex items-center">
                  <div className="mr-4 h-12 w-12 bg-secondary-accent rounded-lg flex items-center justify-center text-white">
                    <span className="font-semibold">DB</span>
                  </div>
                  <div>
                    <p className="font-medium">Database Systems</p>
                    <p className="text-sm text-foreground/80">
                      1:00 PM - 2:30 PM
                    </p>
                  </div>
                </div>
                <span className="bg-yellow-500/10 text-yellow-500 text-xs px-2 py-1 rounded-full">
                  Device Check
                </span>
              </li>
              <li className="py-3 flex justify-between items-center">
                <div className="flex items-center">
                  <div className="mr-4 h-12 w-12 bg-accent rounded-lg flex items-center justify-center text-white">
                    <span className="font-semibold">AI</span>
                  </div>
                  <div>
                    <p className="font-medium">Artificial Intelligence</p>
                    <p className="text-sm text-foreground/80">
                      3:00 PM - 4:30 PM
                    </p>
                  </div>
                </div>
                <span className="bg-green-500/10 text-green-500 text-xs px-2 py-1 rounded-full">
                  Ready
                </span>
              </li>
              <li className="py-3 flex justify-between items-center">
                <div className="flex items-center">
                  <div className="mr-4 h-12 w-12 bg-green-500 rounded-lg flex items-center justify-center text-white">
                    <span className="font-semibold">SE</span>
                  </div>
                  <div>
                    <p className="font-medium">Software Engineering</p>
                    <p className="text-sm text-foreground/80">
                      Tomorrow, 9:00 AM
                    </p>
                  </div>
                </div>
                <span className="bg-blue-500/10 text-blue-500 text-xs px-2 py-1 rounded-full">
                  Upcoming
                </span>
              </li>
            </ul>
          </Card>
        </div>
      </div>
    </div>
  );
}


--- File: /home/flow/student-dashboard/src/app/(main)/profile/page.tsx ---
"use client";

import React, { useState } from 'react';
import Image from 'next/image';
import Card from '@/components/Card';
import {
  AcademicCapIcon,
  UserGroupIcon,
  CalendarDaysIcon,
  ChartBarIcon,
  EnvelopeIcon,
  PhoneIcon,
  BuildingOfficeIcon,
  CalendarIcon,
  DeviceTabletIcon,
  EllipsisVerticalIcon,
  PlusIcon,
} from '@heroicons/react/24/outline';
import Link from 'next/link';

const LecturerProfilePage = () => {
  const [activeTab, setActiveTab] = useState('overview');
  
  // Sample lecturer data
  const lecturer = {
    id: 'L1029',
    name: 'Dr. Sarah Johnson',
    department: 'Computer Science',
    email: 's.johnson@university.edu',
    phone: '(555) 123-4567',
    joinDate: 'August 15, 2022',
    profileImage: '/api/placeholder/150/150',
    courses: [
      { id: 'CS101', name: 'Introduction to Programming', students: 120, sessions: 24, attendanceRate: 87 },
      { id: 'CS302', name: 'Database Systems', students: 75, sessions: 18, attendanceRate: 92 },
      { id: 'CS450', name: 'Machine Learning', students: 45, sessions: 16, attendanceRate: 95 }
    ],
    devices: [
      { id: 'D2045', name: 'Samsung Galaxy Tab S7', type: 'tablet', lastUsed: '2 hours ago', status: 'active', location: 'Science Building' },
      { id: 'D1078', name: 'iPad Pro 12.9"', type: 'tablet', lastUsed: 'Yesterday', status: 'active', location: 'Main Library' }
    ],
    recentSessions: [
      { id: 'S5023', course: 'CS101', date: 'March 18, 2025', time: '10:00 AM - 11:30 AM', attendance: '112/120', rate: 93 },
      { id: 'S5022', course: 'CS302', date: 'March 17, 2025', time: '2:00 PM - 3:30 PM', attendance: '72/75', rate: 96 },
      { id: 'S5019', course: 'CS450', date: 'March 15, 2025', time: '9:00 AM - 11:00 AM', attendance: '42/45', rate: 93 }
    ]
  };

  // Stats cards for overview tab
  const statsCards = [
    { label: 'Courses', value: lecturer.courses.length, icon: <AcademicCapIcon className="h-6 w-6" />, color: 'bg-primary-accent/10 text-primary-accent' },
    { label: 'Students', value: lecturer.courses.reduce((sum, course) => sum + course.students, 0), icon: <UserGroupIcon className="h-6 w-6" />, color: 'bg-green-500/10 text-green-500' },
    { label: 'Sessions', value: lecturer.courses.reduce((sum, course) => sum + course.sessions, 0), icon: <CalendarDaysIcon className="h-6 w-6" />, color: 'bg-purple-500/10 text-purple-500' },
    { label: 'Avg. Attendance', value: `${Math.round(lecturer.courses.reduce((sum, course) => sum + course.attendanceRate, 0) / lecturer.courses.length)}%`, icon: <ChartBarIcon className="h-6 w-6" />, color: 'bg-yellow-500/10 text-yellow-500' }
  ];

  return (
    <div className="flex-1 flex flex-col overflow-hidden">
      {/* Header section */}
      <div className="bg-card-background shadow-sm">
        <div className="max-w-6xl mx-auto px-6 sm:px-8 lg:px-10 py-6">
          <div className="flex flex-col md:flex-row md:items-center md:justify-between">
            <div className="flex items-center">
              <div className="flex-shrink-0">
                <Image className="h-20 w-20 rounded-full object-cover border-2 border-primary-accent" src={lecturer.profileImage} width={80} height={80} alt={lecturer.name} />
              </div>
              <div className="ml-4">
                <div className="flex flex-col sm:flex-row sm:items-center mt-1 text-xl text-foreground/80">
                  <p className="">{lecturer.department}</p>
                  <span className="hidden sm:block sm:mx-2 text-foreground/60">•</span>
                  <p className="">ID: {lecturer.id}</p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Tabs */}
      <div className="max-w-6xl mx-auto px-6 sm:px-8 lg:px-10 mt-6">
        <div className="border-b border-border-color">
          <nav className="-mb-px flex space-x-6 overflow-x-auto">
            <button
              onClick={() => setActiveTab('overview')}
              className={`py-4 px-1 border-b-2 font-medium text-base whitespace-nowrap ${
                activeTab === 'overview'
                  ? 'border-primary-accent text-primary-accent'
                  : 'border-transparent text-foreground/80 hover:text-foreground hover:border-foreground/30'
              }`}
            >
              Overview
            </button>
            <button
              onClick={() => setActiveTab('courses')}
              className={`py-4 px-1 border-b-2 font-medium text-base whitespace-nowrap ${
                activeTab === 'courses'
                  ? 'border-primary-accent text-primary-accent'
                  : 'border-transparent text-foreground/80 hover:text-foreground hover:border-foreground/30'
              }`}
            >
              Courses
            </button>
            <button
              onClick={() => setActiveTab('attendance')}
              className={`py-4 px-1 border-b-2 font-medium text-base whitespace-nowrap ${
                activeTab === 'attendance'
                  ? 'border-primary-accent text-primary-accent'
                  : 'border-transparent text-foreground/80 hover:text-foreground hover:border-foreground/30'
              }`}
            >
              Attendance
            </button>
            <button
              onClick={() => setActiveTab('devices')}
              className={`py-4 px-1 border-b-2 font-medium text-base whitespace-nowrap ${
                activeTab === 'devices'
                  ? 'border-primary-accent text-primary-accent'
                  : 'border-transparent text-foreground/80 hover:text-foreground hover:border-foreground/30'
              }`}
            >
              Devices
            </button>
          </nav>
        </div>
      </div>

      {/* Content area */}
      <div className="max-w-6xl mx-auto px-6 sm:px-8 lg:px-10 mt-8">
        {/* Overview Tab */}
        {activeTab === 'overview' && (
          <div>
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8">
              {statsCards.map((stat, index) => (
                <Card key={index} className="p-6">
                  <div className="flex items-center">
                    <div className={`w-14 h-14 rounded-full ${stat.color} flex items-center justify-center text-xl`}>
                      {stat.icon}
                    </div>
                    <div className="ml-4">
                      <p className="text-base font-medium text-foreground/80">{stat.label}</p>
                      <p className="text-3xl font-semibold text-foreground mt-1">{stat.value}</p>
                    </div>
                  </div>
                </Card>
              ))}
            </div>

            <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
              {/* Contact Information */}
              <Card className="p-6">
                <h2 className="text-xl font-semibold text-foreground mb-4">Contact Information</h2>
                <div className="space-y-4">
                  <div className="flex items-center">
                    <EnvelopeIcon className="h-5 w-5 text-foreground/60 mr-3" />
                    <div>
                      <p className="text-sm font-medium text-foreground/80">Email</p>
                      <p className="mt-1 text-base text-foreground">{lecturer.email}</p>
                    </div>
                  </div>
                  <div className="flex items-center">
                    <PhoneIcon className="h-5 w-5 text-foreground/60 mr-3" />
                    <div>
                      <p className="text-sm font-medium text-foreground/80">Phone</p>
                      <p className="mt-1 text-base text-foreground">{lecturer.phone}</p>
                    </div>
                  </div>
                  <div className="flex items-center">
                    <BuildingOfficeIcon className="h-5 w-5 text-foreground/60 mr-3" />
                    <div>
                      <p className="text-sm font-medium text-foreground/80">Department</p>
                      <p className="mt-1 text-base text-foreground">{lecturer.department}</p>
                    </div>
                  </div>
                  <div className="flex items-center">
                    <CalendarIcon className="h-5 w-5 text-foreground/60 mr-3" />
                    <div>
                      <p className="text-sm font-medium text-foreground/80">Joined</p>
                      <p className="mt-1 text-base text-foreground">{lecturer.joinDate}</p>
                    </div>
                  </div>
                </div>
              </Card>

              {/* Recent Sessions */}
              <Card className="p-6 lg:col-span-2">
                <div className="flex items-center justify-between mb-4">
                  <h2 className="text-xl font-semibold text-foreground">Recent Sessions</h2>
                  <Link href="/sessions" className="text-base text-primary-accent hover:underline font-medium">View All</Link>
                </div>
                <div className="space-y-4">
                  {lecturer.recentSessions.map((session) => (
                    <div key={session.id} className="bg-background rounded-lg p-4">
                      <div className="flex justify-between items-center">
                        <div>
                          <h3 className="text-base font-medium text-foreground">{session.course}</h3>
                          <p className="text-sm text-foreground/80 mt-1">{session.date} • {session.time}</p>
                        </div>
                        <div className="text-right">
                          <div className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-500/10 text-green-700">
                            {session.rate}% Attendance
                          </div>
                          <p className="text-sm text-foreground/80 mt-1">{session.attendance} Students</p>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </Card>
            </div>
          </div>
        )}

        {/* Courses Tab */}
        {activeTab === 'courses' && (
          <div>
            <div className="flex items-center justify-between mb-6">
              <h2 className="text-xl font-semibold text-foreground">Your Courses</h2>
              <button className="inline-flex items-center px-4 py-2 border border-transparent text-base font-medium rounded-lg shadow-sm text-white bg-primary-accent hover:bg-primary-accent/90">
                <PlusIcon className="h-5 w-5 mr-2" />
                Add New Course
              </button>
            </div>
            <Card className="overflow-hidden">
              <ul className="divide-y divide-border-color">
                {lecturer.courses.map((course) => (
                  <li key={course.id} className="p-6">
                    <div className="flex items-center justify-between">
                      <div>
                        <h3 className="text-lg font-medium text-foreground">{course.name}</h3>
                        <div className="flex items-center text-sm text-foreground/80 mt-1">
                          <span>{course.id}</span>
                          <span className="mx-2">•</span>
                          <span>{course.students} Students</span>
                          <span className="mx-2">•</span>
                          <span>{course.sessions} Sessions</span>
                        </div>
                      </div>
                      <div className="flex items-center">
                        <div className="mr-4 text-right">
                          <div className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-500/10 text-green-700">
                            {course.attendanceRate}% Attendance
                          </div>
                        </div>
                        <button className="inline-flex items-center px-4 py-2 border border-border-color text-base font-medium rounded-lg text-foreground bg-card-background hover:bg-foreground/5">
                          Manage
                        </button>
                      </div>
                    </div>
                  </li>
                ))}
              </ul>
            </Card>
          </div>
        )}

        {/* Attendance Tab */}
        {activeTab === 'attendance' && (
          <div>
            <div className="flex flex-col md:flex-row md:items-center md:justify-between mb-6">
              <h2 className="text-xl font-semibold text-foreground mb-2 md:mb-0">Attendance Management</h2>
              <div className="flex flex-col sm:flex-row space-y-3 sm:space-y-0 sm:space-x-3 w-full md:w-auto">
                <button className="inline-flex items-center justify-center px-5 py-2 border border-transparent text-base font-medium rounded-lg shadow-sm text-white bg-primary-accent hover:bg-primary-accent/90 w-full sm:w-auto">
                  Take Attendance
                </button>
                <button className="inline-flex items-center justify-center px-5 py-2 border border-border-color text-base font-medium rounded-lg shadow-sm text-foreground bg-card-background hover:bg-foreground/5 w-full sm:w-auto">
                  Export Report
                </button>
              </div>
            </div>
            
            <Card className="overflow-hidden">
              <div className="px-6 py-5">
                <h3 className="text-lg font-semibold text-foreground mb-4">Attendance Summary</h3>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                  {lecturer.courses.map((course) => (
                    <div key={course.id} className="bg-background rounded-lg p-4">
                      <h4 className="text-base font-medium text-foreground">{course.name}</h4>
                      <div className="mt-2 relative pt-1">
                        <div className="flex items-center justify-between text-sm mb-1">
                          <span>Attendance Rate</span>
                          <span>{course.attendanceRate}%</span>
                        </div>
                        <div className="overflow-hidden h-2 text-xs flex rounded-full bg-foreground/10">
                          <div 
                            style={{ width: `${course.attendanceRate}%` }} 
                            className="shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-primary-accent rounded-full"
                          />
                        </div>
                      </div>
                      <div className="mt-3 flex justify-between text-sm text-foreground/80">
                        <span>{course.students} Students</span>
                        <span>{course.sessions} Sessions</span>
                      </div>
                    </div>
                  ))}
                </div>
                
                <div className="mt-8">
                  <h3 className="text-lg font-semibold text-foreground mb-4">Recent Attendance Records</h3>
                  <div className="overflow-x-auto">
                    <table className="min-w-full divide-y divide-border-color">
                      <thead className="bg-background">
                        <tr>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-foreground/80 uppercase tracking-wider">Session</th>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-foreground/80 uppercase tracking-wider">Date & Time</th>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-foreground/80 uppercase tracking-wider">Attendance</th>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-foreground/80 uppercase tracking-wider">Actions</th>
                        </tr>
                      </thead>
                      <tbody className="bg-card-background divide-y divide-border-color">
                        {lecturer.recentSessions.map((session) => (
                          <tr key={session.id}>
                            <td className="px-6 py-4 whitespace-nowrap text-base font-medium text-foreground">{session.course}</td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-foreground/80">{session.date}<br/>{session.time}</td>
                            <td className="px-6 py-4 whitespace-nowrap">
                              <div className="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-green-500/10 text-green-700">
                                {session.rate}% ({session.attendance})
                              </div>
                            </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-foreground/80">
                              <button className="text-primary-accent hover:underline mr-4">View</button>
                              <button className="text-foreground/80 hover:underline">Edit</button>
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                </div>
              </div>
            </Card>
          </div>
        )}

        {/* Devices Tab */}
        {activeTab === 'devices' && (
          <div>
            {/* Devices Section */}
            <div>
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-xl font-semibold text-foreground">Your Devices</h2>
                <button className="inline-flex items-center px-4 py-2 border border-transparent text-base font-medium rounded-lg shadow-sm text-white bg-primary-accent hover:bg-primary-accent/90">
                  <PlusIcon className="h-5 w-5 mr-2" />
                  Add Device
                </button>
              </div>
              <Card className="overflow-hidden">
                <ul className="divide-y divide-border-color">
                  {lecturer.devices.map((device) => (
                    <li key={device.id} className="p-6">
                      <div className="flex items-start justify-between">
                        <div className="flex items-center">
                          <div className="p-3 bg-primary-accent/10 rounded-full">
                            <DeviceTabletIcon className="h-6 w-6 text-primary-accent" />
                          </div>
                          <div className="ml-4">
                            <h3 className="text-base font-medium text-foreground">{device.name}</h3>
                            <div className="flex flex-wrap items-center text-sm text-foreground/80 mt-1">
                              <span>{device.id}</span>
                              <span className="mx-2">•</span>
                              <span>{device.type}</span>
                              <span className="mx-2">•</span>
                              <span>Last used: {device.lastUsed}</span>
                            </div>
                            <p className="text-sm text-foreground/80 mt-1">Location: {device.location}</p>
                          </div>
                        </div>
                        <div className="flex items-center">
                          <span className={`inline-flex items-center px-3 py-1 rounded-full text-sm font-medium ${device.status === 'active' ? 'bg-green-500/10 text-green-700' : 'bg-red-500/10 text-red-700'}`}>
                            {device.status === 'active' ? 'Active' : 'Inactive'}
                          </span>
                          <button className="ml-4 text-foreground/60 hover:text-foreground">
                            <EllipsisVerticalIcon className="h-6 w-6" />
                          </button>
                        </div>
                      </div>
                    </li>
                  ))}
                </ul>
              </Card>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default LecturerProfilePage;


--- File: /home/flow/student-dashboard/src/app/(main)/device/page.tsx ---
"use client";
import React, { useState, useEffect } from 'react';
import { ArrowLeftIcon, DevicePhoneMobileIcon, CheckBadgeIcon } from '@heroicons/react/24/outline';
import Link from 'next/link';

type DeviceInfo = {
  name: string;
  id: string;
  lastActive: string;
};

export default function DeviceManagePage() {
  const [deviceInfo, setDeviceInfo] = useState<DeviceInfo | null>(null);
  const [authorizing, setAuthorizing] = useState(false);
  const [authImage, setAuthImage] = useState<string | null>(null);
  const [etag, setEtag] = useState<string | null>(null);
  const [uploading, setUploading] = useState(false);

  useEffect(() => {
    const stored = localStorage.getItem('authorizedDevice');
    if (stored) {
      setDeviceInfo(JSON.parse(stored));
    }
  }, []);

  // Step 1: Request backend to generate UUID and image
  const handleAuthorizeDevice = async () => {
    setAuthorizing(true);
    try {
      // Replace with your backend endpoint
      const res = await fetch('/api/device/authorize');
      if (!res.ok && res.status != 304) throw new Error('Failed to authorize device');
      const etag = res.headers.get('ETag');
      console.log()
      const data = await res.json();
      setAuthImage(data.image); // image should be a base64 string or URL
      setEtag(etag);
      // Store info in localStorage
      localStorage.setItem('deviceAuthImage', data.image);
      localStorage.setItem('deviceAuthEtag', etag || '');
      setDeviceInfo({
        name: 'Authorized Device',
        id: data.uuid,
        lastActive: new Date().toLocaleString(),
      });
      localStorage.setItem('authorizedDevice', JSON.stringify({
        name: 'Authorized Device',
        id: data.uuid,
        lastActive: new Date().toLocaleString(),
      }));
      alert('Device authorized successfully!');
    } catch (error) {
      alert('Device authorization failed.');
    }
    setAuthorizing(false);
  };

  // Step 2: Upload image to backend for validation
  const handleUploadImage = async (e: React.ChangeEvent<HTMLInputElement>) => {
    setUploading(true);
    try {
      const file = e.target.files?.[0];
      if (!file) return;
      const formData = new FormData();
      formData.append('image', file);
      // Replace with your backend endpoint
      const res = await fetch('/api/device/validate', {
        method: 'POST',
        body: formData,
      });
      if (!res.ok) throw new Error('Validation failed');
      const data = await res.json();
      if (data.valid) {
        alert('Device authorization validated!');
      } else {
        alert('Device authorization invalid.');
      }
    } catch (error) {
      alert('Failed to validate device.');
    }
    setUploading(false);
  };

  return (
    <div className="max-w-xl mx-auto py-10 px-4">
      <Link href="/dashboard" className="flex items-center text-neutral-400 hover:text-neutral-100 mb-6 transition-colors">
        <ArrowLeftIcon className="h-5 w-5 mr-2" /> Back to Dashboard
      </Link>
      <div className="bg-neutral-950 border border-neutral-800 rounded-2xl shadow-lg p-8">
        {deviceInfo ? (
          <div className="flex flex-col gap-4 mb-6">
            <div className="flex items-center gap-4">
              <div className="w-14 h-14 bg-neutral-800 rounded-full flex items-center justify-center">
                <DevicePhoneMobileIcon className="h-8 w-8 text-neutral-400" />
              </div>
              <div>
                <div className="text-lg font-bold text-neutral-100">{deviceInfo.name}</div>
                <div className="text-sm text-neutral-400">Last active: {deviceInfo.lastActive}</div>
                <div className="text-xs text-neutral-500 mt-1">Device ID: {deviceInfo.id}</div>
              </div>
            </div>
          </div>
        ) : (
          <div className="flex flex-col items-center gap-4 mb-6">
            <div className="w-14 h-14 bg-neutral-800 rounded-full flex items-center justify-center">
              <DevicePhoneMobileIcon className="h-8 w-8 text-neutral-400" />
            </div>
            <div className="text-lg font-bold text-neutral-100">No device authorized</div>
            <button
              onClick={handleAuthorizeDevice}
              disabled={authorizing}
              className="w-full flex items-center justify-center gap-2 px-4 py-2 rounded-lg font-semibold text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-600 focus:ring-offset-2 transition-colors duration-200 disabled:opacity-60 disabled:cursor-not-allowed"
            >
              <CheckBadgeIcon className="h-5 w-5" />
              {authorizing ? 'Authorizing...' : 'Authorize Device'}
            </button>
            <p className="text-xs text-neutral-500 text-center">Authorizing this device will allow it to be used for attendance verification.</p>
          </div>
        )}
      </div>
    </div>
  );
}


--- File: /home/flow/student-dashboard/src/app/(main)/activities/page.tsx ---
"use client";
import React, { useState } from 'react';
import { MagnifyingGlassIcon, UserIcon, ClockIcon, CalendarDaysIcon, ChevronDownIcon, EllipsisVerticalIcon, ArrowPathIcon } from '@heroicons/react/24/outline';

const LecturerAdminActivitiesPage = () => {
    const [activities] = useState([ // Sample Activity Data
        {
            id: 2,
            user: 'admin.lecturer2',
            userName: 'Prof. Jones',
            action: 'Device Status Changed',
            details: 'Changed status of "Main Hall Scanner" to "Maintenance"',
            affectedItem: 'Main Hall Scanner (DEV001)',
            timestamp: new Date(2025, 2, 20, 9, 15),
            category: 'Device Management'
        },
        {
            id: 3,
            user: 'admin.lecturer1',
            userName: 'Dr. Smith',
            action: 'Course Assigned to Device',
            details: 'Assigned course "CSC402 - Advanced Algorithms" to "Lab A Scanner"',
            affectedItem: 'Lab A Scanner (DEV002), CSC402',
            timestamp: new Date(2025, 2, 19, 16, 48),
            category: 'Course Management'
        },
        {
            id: 4,
            user: 'admin.lecturer3',
            userName: 'Ms. Davis',
            action: 'User Role Updated',
            details: 'Updated role of user "student123" to "Teaching Assistant"',
            affectedItem: 'student123',
            timestamp: new Date(2025, 2, 19, 14, 0),
            category: 'User Management'
        },
        {
            id: 6,
            user: 'admin.lecturer1',
            userName: 'Dr. Smith',
            action: 'Report Generated',
            details: 'Generated "Device Status Report" for all devices',
            affectedItem: 'Device Status Report (Mar 18-20, 2025)',
            timestamp: new Date(2025, 2, 18, 8, 55),
            category: 'Reporting'
        },
    ]);
    const [searchQuery, setSearchQuery] = useState('');
    const [filterCategory, setFilterCategory] = useState('all');
    const [sortBy, setSortBy] = useState('timestamp-desc'); // Default sort by timestamp descending

    const categories = ['all', 'Device Management', 'User Management', 'Course Management', 'Reporting']; // Available categories for filtering

    const filteredActivities = activities.filter(activity => {
        const textMatch = activity.userName.toLowerCase().includes(searchQuery.toLowerCase()) ||
                          activity.action.toLowerCase().includes(searchQuery.toLowerCase()) ||
                          activity.details.toLowerCase().includes(searchQuery.toLowerCase()) ||
                          activity.affectedItem.toLowerCase().includes(searchQuery.toLowerCase());
        const categoryMatch = filterCategory === 'all' || activity.category === filterCategory;
        return textMatch && categoryMatch;
    });

    const sortedActivities = [...filteredActivities].sort((a, b) => {
        if (sortBy === 'timestamp-desc') {
            return b.timestamp.getTime() - a.timestamp.getTime(); // Descending (newest first)
        } else if (sortBy === 'timestamp-asc') {
            return a.timestamp.getTime() - b.timestamp.getTime(); // Ascending (oldest first)
        } else if (sortBy === 'user-asc') {
            return a.userName.localeCompare(b.userName);
        } else if (sortBy === 'user-desc') {
            return b.userName.localeCompare(a.userName);
        }
        return 0; // Default no change
    });


    return (
        <div className="flex-1 flex flex-col overflow-hidden">
            {/* Header */}
            <header className="bg-card-background border-b border-border-color p-4">
                <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center">
                    <div className="text-lg font-semibold mb-2 sm:mb-0">Lecturer Admin Activities</div>
                    <div className="relative w-full sm:w-64">
                        <input
                            type="text"
                            placeholder="Search activities..."
                            className="pl-9 pr-4 py-2 border border-border-color rounded-md focus:outline-none focus:ring-1 focus:ring-primary-accent w-full bg-background"
                            value={searchQuery}
                            onChange={(e) => setSearchQuery(e.target.value)}
                        />
                        <MagnifyingGlassIcon className="absolute left-3 top-2.5 h-5 w-5 text-foreground/60" />
                    </div>
                </div>
            </header>

            {/* Content */}
            <div className="flex-1 overflow-auto p-4 sm:p-6">
                {/* Filters and Actions Bar */}
                <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center mb-6 space-y-4 sm:space-y-0">
                    <div className="flex flex-col sm:flex-row space-y-4 sm:space-y-0 sm:space-x-4 items-start sm:items-center w-full sm:w-auto">
                        {/* Category Filter */}
                        <div className="relative w-full sm:w-auto">
                            <select
                                className="block appearance-none w-full bg-background border border-border-color hover:border-foreground/30 px-4 py-2 pr-8 rounded shadow leading-tight focus:outline-none focus:ring-1 focus:ring-primary-accent"
                                value={filterCategory}
                                onChange={(e) => setFilterCategory(e.target.value)}
                            >
                                {categories.map(cat => (
                                    <option key={cat} value={cat}>{cat === 'all' ? 'All Categories' : cat}</option>
                                ))}
                            </select>
                            <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-foreground/80">
                                <ChevronDownIcon className="h-4 w-4" />
                            </div>
                        </div>

                        {/* Sort By Dropdown */}
                        <div className="relative w-full sm:w-auto">
                            <select
                                className="block appearance-none w-full bg-background border border-border-color hover:border-foreground/30 px-4 py-2 pr-8 rounded shadow leading-tight focus:outline-none focus:ring-1 focus:ring-primary-accent"
                                value={sortBy}
                                onChange={(e) => setSortBy(e.target.value)}
                            >
                                <option value="timestamp-desc">Newest First</option>
                                <option value="timestamp-asc">Oldest First</option>
                                <option value="user-asc">User (A-Z)</option>
                                <option value="user-desc">User (Z-A)</option>
                            </select>
                            <div className="pointer-events-none absolute inset-y-0 right-0 flex items-center px-2 text-foreground/80">
                                <ChevronDownIcon className="h-4 w-4" />
                            </div>
                        </div>
                    </div>

                    {/* Refresh Button (Optional) */}
                    <div className="w-full sm:w-auto">
                        <button className="flex items-center justify-center w-full px-4 py-2 bg-card-background border border-border-color rounded-md text-foreground/80 hover:bg-foreground/5">
                            <ArrowPathIcon className="h-5 w-5 mr-2" />
                            Refresh Activities
                        </button>
                    </div>
                </div>

                {/* Activity Log - Table for Desktop, Cards for Mobile */}
                <div className="hidden md:block overflow-x-auto">
                    <table className="min-w-full bg-card-background border border-border-color rounded-md">
                        <thead className="bg-foreground/5">
                            <tr>
                                <th className="py-2 px-3 border-b text-left text-foreground/80">User</th>
                                <th className="py-2 px-3 border-b text-left text-foreground/80">Action</th>
                                <th className="py-2 px-3 border-b text-left text-foreground/80">Details</th>
                                <th className="py-2 px-3 border-b text-left text-foreground/80">Category</th>
                                <th className="py-2 px-3 border-b text-left text-foreground/80">Timestamp</th>
                                <th className="py-2 px-3 border-b text-right text-foreground/80"></th> {/* Actions */}
                            </tr>
                        </thead>
                        <tbody>
                            {sortedActivities.length > 0 ? (
                                sortedActivities.map(activity => (
                                    <tr key={activity.id} className="hover:bg-foreground/5 transition-colors">
                                        <td className="py-2 px-3 border-b text-foreground font-medium flex items-center">
                                            <UserIcon className="h-4 w-4 mr-2 text-foreground/60" />
                                            {activity.userName} <span className="text-foreground/60 ml-1 text-sm">({activity.user})</span>
                                        </td>
                                        <td className="py-2 px-3 border-b text-foreground/80">{activity.action}</td>
                                        <td className="py-2 px-3 border-b text-foreground/80">{activity.details}</td>
                                        <td className="py-2 px-3 border-b text-foreground/80">{activity.category}</td>
                                        <td className="py-2 px-3 border-b text-foreground/80">
                                            <div className="flex items-center">
                                                <CalendarDaysIcon className="h-4 w-4 mr-1 text-foreground/60" />
                                                {activity.timestamp.toLocaleDateString()}
                                            </div>
                                            <div className="flex items-center">
                                                <ClockIcon className="h-4 w-4 mr-1 text-foreground/60" />
                                                {activity.timestamp.toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                                            </div>
                                        </td>
                                        <td className="py-2 px-3 border-b text-right">
                                            <button className="text-foreground/50 hover:text-foreground/80">
                                                <EllipsisVerticalIcon className="h-5 w-5" />
                                            </button>
                                        </td>
                                    </tr>
                                ))
                            ) : (
                                <tr>
                                    <td colSpan={6} className="py-4 px-3 text-center text-foreground/60">
                                        No activities found matching your criteria.
                                    </td>
                                </tr>
                            )}
                        </tbody>
                    </table>
                </div>

                {/* Cards for Mobile */}
                <div className="md:hidden space-y-4">
                    {sortedActivities.length > 0 ? (
                        sortedActivities.map(activity => (
                            <div key={activity.id} className="bg-card-background border border-border-color rounded-lg p-4">
                                <div className="flex justify-between items-start">
                                    <div>
                                        <p className="font-bold text-foreground">{activity.action}</p>
                                        <p className="text-sm text-foreground/80">{activity.details}</p>
                                    </div>
                                    <button className="text-foreground/50 hover:text-foreground/80">
                                        <EllipsisVerticalIcon className="h-5 w-5" />
                                    </button>
                                </div>
                                <div className="mt-4 pt-4 border-t border-border-color">
                                    <div className="flex items-center text-sm text-foreground/80 mb-2">
                                        <UserIcon className="h-4 w-4 mr-2" />
                                        {activity.userName} ({activity.user})
                                    </div>
                                    <div className="flex items-center text-sm text-foreground/80">
                                        <ClockIcon className="h-4 w-4 mr-2" />
                                        {activity.timestamp.toLocaleString()}
                                    </div>
                                </div>
                            </div>
                        ))
                    ) : (
                        <div className="text-center text-foreground/60 py-8">
                            No activities found matching your criteria.
                        </div>
                    )}
                </div>
            </div>
        </div>
    );
};



export default LecturerAdminActivitiesPage;


--- File: /home/flow/student-dashboard/src/app/(main)/attendance/[sessionId]/page.tsx ---
"use client";
import { useEffect, useState, useRef } from 'react';
import { useParams } from 'next/navigation';
import { CheckCircleIcon, ExclamationCircleIcon } from '@heroicons/react/24/outline';
import { useRouter } from 'next/navigation';

const validateDeviceAuthorization = async (imageData: string) => {
      try {
        const response = await fetch(imageData);
        const blob = await response.blob();
        const file = new File([blob], "env.png", {type: blob.type});
        if (!file) return;
        const formData = new FormData();
        formData.append('image', file);
        const res = await fetch('/api/device/validate', {
          method: 'POST',
          body: formData,
        });
        if (!res.ok) throw new Error('Validation failed');
        const data = await res.json();
        if (data.valid) {
          return [true, data.uuid];
        } else {
          return [false, null];
        }
      } catch (error) {
        alert('Failed to validate device.');
      }
  };

export default function AttendancePage() {
    const router = useRouter();
    const params = useParams();
    const sessionId = params?.sessionId as string;
    const [deviceUUID, setDeviceUUID] = useState(null);
    const [currentRoom, setCurrentRoom] = useState<{id: string, name: string, status: string} | null>(null);
    const [currentSession, setCurrentSession] = useState<{id: string, name: string, time: string, status: string} | null>(null);
    const intervalRef = useRef<number | null>(null);

  useEffect(() => {
    // Fetch attendance room and session info
    async function fetchAttendanceData() {
      if (!sessionId) return;
      try {
        const res = await fetch(`/api/attendance-summary?attendID=${sessionId}`);
        if (!res.ok) throw new Error('Failed to fetch attendance data');
        const data = await res.json();
        setCurrentRoom(data.room);
        setCurrentSession(data.session);
      } catch (err) {
        // fallback or error UI could be added here
      }
    }
    fetchAttendanceData();
    intervalRef.current = window.setInterval(fetchAttendanceData, 5000);


    // Device authorization
    fetch('/api/device/authorize')
      .then(res => res.json())
      .then(json => {
        return validateDeviceAuthorization(json.image);
      }).then( arr => {
        if(arr){
        const [isValid, deviceUUID] = arr;
        if(!isValid){
          router.push("/dashboard");
        }
        setDeviceUUID(deviceUUID);
      }
      });
    
    return () => {
      if (intervalRef.current) {
        window.clearInterval(intervalRef.current);
      }
    };
  }, [sessionId, router]);
  
  const handleTakeAttendance = async () => {
    let device: BluetoothDevice | undefined;
    try {
      if (!navigator.bluetooth) {
        alert("Bluetooth not supported on this browser.");
        return;
      }
      const isBluetoothAvailable = await navigator.bluetooth.getAvailability();
      if (!isBluetoothAvailable) {
        alert("Bluetooth is not available or not enabled.");
        return;
      }

      const uuids = await fetch("/api/attendance-rooms", {
        method: "POST",
        headers: {'Content-Type': 'application/json'},
        body: JSON.stringify({sessionId: sessionId})
      }).then(res => res.json());

      const SERVICE_UUIDs = uuids.rooms;
      const CHARACTERISTIC_UUID = "bfc0c92f-317d-4ba9-976b-cc11ce77b4ca";

      console.log(SERVICE_UUIDs)
      device = await navigator.bluetooth.requestDevice({ filters: [{ services: SERVICE_UUIDs }] });
      const server = await device.gatt?.connect();
      if (!server) throw new Error("Couldn't connect to device");

      let service;
      for (const uuid of SERVICE_UUIDs) {
          try {
              service = await server.getPrimaryService(uuid);
              if (service) break;
          } catch (e) {
              console.error(`Service ${uuid} not found, trying next.`);
          }
      }

      if (!service) throw new Error("No matching service found on device.");
      
      const characteristic = await service.getCharacteristic(CHARACTERISTIC_UUID);        
      const value = await characteristic.readValue();
      
      const decoder = new TextDecoder("utf-8");
      const uuidValue = decoder.decode(value);

      const res = await fetch('/api/attendance/mark', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ uuid: uuidValue, sessionId: currentSession?.id }),
      });
      if (!res.ok) throw new Error('Attendance marking failed');
      const data = await res.json();
      if (data.success) {
        alert('Attendance marked successfully!');
      } else {
        alert('Attendance marking failed.');
      }

    } catch (error) {
      console.log(error)
      alert(`An error occurred: ${error instanceof Error ? error.message : "Unknown error"}`);
    } finally {
        if (device?.gatt?.connected) {
            device.gatt.disconnect();
        }
    }
  };


  return (
    <div className="max-w-2xl mx-auto py-10 px-4">
      {/* Header Section */}
      <div className="flex items-center gap-3 mb-8">
        <CheckCircleIcon className="h-10 w-10 text-blue-500" />
        <h1 className="text-3xl font-extrabold text-neutral-100 tracking-tight">Attendance Room</h1>
      </div>

      {/* Room Info Card */}
      <div className="bg-gradient-to-br from-neutral-950 via-neutral-900 to-neutral-950 border border-neutral-800 rounded-2xl shadow-lg p-6 mb-6">
        {currentRoom ? (
          <>
            <div className="flex items-center justify-between mb-2">
              <h2 className="text-xl font-bold text-neutral-100">{currentRoom.name}</h2>
              <span className={`px-3 py-1 rounded-full text-xs font-semibold ${currentRoom.status === 'open' ? 'bg-green-900 text-green-400' : 'bg-red-900 text-red-400'}`}>{currentRoom.status.toUpperCase()}</span>
            </div>
            <p className="text-neutral-400 text-sm">Room ID: <span className="font-mono text-neutral-300">{currentRoom.id}</span></p>
          </>
        ) : (
          <p className="text-neutral-400">Loading room info...</p>
        )}
      </div>

      {/* Session Info Card */}
      <div className="bg-neutral-900 border border-neutral-800 rounded-2xl p-6 mb-8">
        {currentSession ? (
          <>
            <div className="flex items-center gap-2 mb-2">
              <span className="inline-block w-2 h-2 rounded-full bg-blue-400 animate-pulse" />
              <h3 className="text-lg font-semibold text-neutral-200">Session Info</h3>
            </div>
            <p className="text-neutral-300 font-medium mb-1">{currentSession.name}</p>
            <p className="text-neutral-400 mb-1">{new Date(currentSession.time).toLocaleDateString('en-US', {
              year: 'numeric',
              month: 'long',
              day: 'numeric',
              hour: '2-digit',
              minute: '2-digit'
            })}</p>
            <p className="text-neutral-400">Session Status: <span className={currentSession.status === 'ongoing' ? 'text-blue-400 font-bold' : 'text-yellow-400'}>{currentSession.status.charAt(0).toUpperCase() + currentSession.status.slice(1)}</span></p>
          </>
        ) : (
          <p className="text-neutral-400">Loading session info...</p>
        )}
      </div>

      {/* Take Attendance Button */}
      <button
        onClick={handleTakeAttendance}
        className="w-full bg-gradient-to-r from-blue-600 to-blue-500 hover:from-blue-700 hover:to-blue-600 text-white font-bold py-4 px-6 rounded-xl flex items-center justify-center gap-2 shadow-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-blue-400 focus:ring-offset-2"
        disabled={!currentRoom || !currentSession}
      >
        <CheckCircleIcon className="h-6 w-6 text-white animate-bounce" />
        Take Attendance
      </button>
    </div>
  );
}


--- File: /home/flow/student-dashboard/src/app/(main)/schedule/page.tsx ---
'use client';

import { useEffect, useState } from 'react';
import { PlusCircleIcon, CalendarDaysIcon, ClockIcon, BookOpenIcon } from '@heroicons/react/24/outline';

interface Schedule {
  id: number;
  courseId: number;
  dayOfWeek: number;
  startTime: string;
  endTime: string;
}

const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];

export default function SchedulePage() {
  const [schedule, setSchedule] = useState<Schedule[]>([]);
  const [courseId, setCourseId] = useState('');
  const [dayOfWeek, setDayOfWeek] = useState('');
  const [startTime, setStartTime] = useState('');
  const [endTime, setEndTime] = useState('');
  const [isModalOpen, setIsModalOpen] = useState(false);

  useEffect(() => {
    const fetchSchedule = async () => {
      const res = await fetch('/api/schedule');
      const data = await res.json();
      setSchedule(data);
    };
    fetchSchedule();
  }, []);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    const res = await fetch('/api/schedule', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        courseId: parseInt(courseId),
        dayOfWeek: parseInt(dayOfWeek),
        startTime,
        endTime,
      }),
    });

    if (res.ok) {
      const newSchedule = await res.json();
      setSchedule([...schedule, newSchedule]);
      setCourseId('');
      setDayOfWeek('');
      setStartTime('');
      setEndTime('');
      setIsModalOpen(false);
    }
  };

  return (
    <div className="space-y-6">
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold text-neutral-100">Weekly Schedule</h1>
        <button
          onClick={() => setIsModalOpen(true)}
          className="flex items-center gap-2 px-4 py-2 rounded-lg bg-neutral-800 text-neutral-100 border border-neutral-700 hover:bg-neutral-700 transition-colors"
        >
          <PlusCircleIcon className="h-5 w-5" />
          <span>Add Schedule</span>
        </button>
      </div>

      <div className="bg-neutral-900 border border-neutral-800 rounded-2xl p-6">
        <div className="grid grid-cols-7 gap-4 text-center mb-4">
          {days.map((day) => (
            <div key={day} className="font-bold text-neutral-200 text-lg">
              {day}
            </div>
          ))}
        </div>
        <div className="grid grid-cols-7 gap-4">
          {Array.from({ length: 7 }).map((_, dayIndex) => {
            const items = schedule.filter((item) => item.dayOfWeek === dayIndex);
            return (
              <div key={dayIndex} className="min-h-[150px] border border-neutral-800 rounded-lg p-3 bg-neutral-950 flex flex-col gap-2 shadow">
                {items.length === 0 && <p className="text-neutral-500 text-sm">No classes</p>}
                {items.map((item) => (
                  <div key={item.id} className="bg-neutral-800 text-neutral-100 p-2 rounded-md text-xs border border-neutral-700">
                    <p className="font-semibold flex items-center gap-1">
                      <BookOpenIcon className="h-4 w-4 text-neutral-400" />
                      <span>Course ID: {item.courseId}</span>
                    </p>
                    <p className="flex items-center gap-1">
                      <ClockIcon className="h-4 w-4 text-neutral-400" />
                      <span>
                        {new Date(item.startTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })} -{' '}
                        {new Date(item.endTime).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })}
                      </span>
                    </p>
                  </div>
                ))}
              </div>
            );
          })}
        </div>
      </div>

      {isModalOpen && (
        <div className="fixed inset-0 bg-neutral-950 bg-opacity-80 flex items-center justify-center z-50 p-4">
          <div className="bg-neutral-900 border border-neutral-800 rounded-2xl w-full max-w-md p-8">
            <h2 className="text-2xl font-bold text-neutral-100 mb-6">Add New Schedule Entry</h2>
            <form onSubmit={handleSubmit} className="space-y-4">
              <div>
                <label htmlFor="courseId" className="block text-neutral-200 text-sm font-medium mb-2">
                  Course ID
                </label>
                <input
                  type="text"
                  id="courseId"
                  value={courseId}
                  onChange={(e) => setCourseId(e.target.value)}
                  className="w-full px-3 py-2 rounded-lg bg-neutral-800 text-neutral-100 border border-neutral-700 focus:ring-2 focus:ring-neutral-700 focus:outline-none text-sm"
                  required
                />
              </div>
              <div>
                <label htmlFor="dayOfWeek" className="block text-neutral-200 text-sm font-medium mb-2">
                  Day of Week (0-6, 0=Sunday)
                </label>
                <input
                  type="number"
                  id="dayOfWeek"
                  value={dayOfWeek}
                  onChange={(e) => setDayOfWeek(e.target.value)}
                  className="w-full px-3 py-2 rounded-lg bg-neutral-800 text-neutral-100 border border-neutral-700 focus:ring-2 focus:ring-neutral-700 focus:outline-none text-sm"
                  min="0"
                  max="6"
                  required
                />
              </div>
              <div>
                <label htmlFor="startTime" className="block text-neutral-200 text-sm font-medium mb-2">
                  Start Time
                </label>
                <div className="relative">
                  <input
                    type="datetime-local"
                    id="startTime"
                    value={startTime}
                    onChange={(e) => setStartTime(e.target.value)}
                    className="w-full px-3 py-2 rounded-lg bg-neutral-800 text-neutral-100 border border-neutral-700 focus:ring-2 focus:ring-neutral-700 focus:outline-none text-sm pr-10"
                    required
                  />
                  <ClockIcon className="absolute right-3 top-1/2 -translate-y-1/2 h-5 w-5 text-neutral-500" />
                </div>
              </div>
              <div>
                <label htmlFor="endTime" className="block text-neutral-200 text-sm font-medium mb-2">
                  End Time
                </label>
                <div className="relative">
                  <input
                    type="datetime-local"
                    id="endTime"
                    value={endTime}
                    onChange={(e) => setEndTime(e.target.value)}
                    className="w-full px-3 py-2 rounded-lg bg-neutral-800 text-neutral-100 border border-neutral-700 focus:ring-2 focus:ring-neutral-700 focus:outline-none text-sm pr-10"
                    required
                  />
                  <ClockIcon className="absolute right-3 top-1/2 -translate-y-1/2 h-5 w-5 text-neutral-500" />
                </div>
              </div>
              <div className="flex justify-end gap-3 mt-6">
                <button
                  type="button"
                  onClick={() => setIsModalOpen(false)}
                  className="px-4 py-2 rounded-lg bg-neutral-800 text-neutral-300 border border-neutral-700 hover:bg-neutral-700 transition-colors"
                >
                  Cancel
                </button>
                <button
                  type="submit"
                  className="px-4 py-2 rounded-lg bg-neutral-100 text-neutral-900 font-semibold border border-neutral-700 hover:bg-neutral-200 transition-colors"
                >
                  Submit
                </button>
              </div>
            </form>
          </div>
        </div>
      )}
    </div>
  );
}


--- File: /home/flow/student-dashboard/src/app/(main)/courses/page.tsx ---
'use client';

import { useEffect, useState } from 'react';
import {
  PlusCircleIcon,
  BookOpenIcon,
  MagnifyingGlassIcon,
  UserCircleIcon,
  StarIcon,
  EllipsisVerticalIcon,
} from '@heroicons/react/24/outline';
import Link from 'next/link';
import AddCourseModal from '@/components/AddCourseModal';
import { CourseOverview } from '@/types';

interface Course {
  id: string;
  name: string;
  description: string;
  credits: number;
  lastAttendance: string;
  nextSession: string;
  recentSessions: any[];
  students: number;
  attendanceRate: string;
  semester: string;
  title: string;
}

export default function CoursesPage() {
  const [courses, setCourses] = useState<CourseOverview[]>([]);
  const [filteredCourses, setFilteredCourses] = useState<CourseOverview[]>([]);
  const [showBookmarked, setShowBookmarked] = useState(false);
  // Demo: Bookmarked state for each course (in real app, store in DB or user profile)
  const [bookmarked, setBookmarked] = useState<{ [id: string]: boolean }>({});
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [searchTerm, setSearchTerm] = useState('');
  const [availableCourses, setAvailableCourses] = useState<CourseOverview[]>([]);

  useEffect(() => {
    // Fetch courses from API
    const fetchCourses = async () => {
      try {
        const res = await fetch('/api/courses');
        if (!res.ok) throw new Error('Failed to fetch courses');
        const data = await res.json();
        setCourses(data || []);

        const res2 = await fetch('/api/courses?isAll=true');
        if (!res2.ok) throw new Error('Failed to fetch courses');
        const data2 = await res2.json();
        setAvailableCourses(data2 || []);
      } catch (err) {
        // fallback or error UI could be added here
      }
    };
    fetchCourses();
  }, []);


  useEffect(() => {
    let results = courses.filter((course) =>
      course.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      course.id.toLowerCase().includes(searchTerm.toLowerCase())
    );
    if (showBookmarked) {
      results = results.filter((course) => bookmarked[course.id]);
    }
    setFilteredCourses(results);
  }, [searchTerm, courses, showBookmarked, bookmarked]);

  const handleAddCourse = (newCourse: CourseOverview) => {
    setCourses((prevCourses) => [...prevCourses, newCourse]);
  };

  const handleSelectCourse = async (courseId: string) => {
    const res = await fetch('/api/courses/add', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ courseId }),
    });
    if (!res.ok) return alert('Failed to add course');
    const courseToAdd = availableCourses.find(c => c.id === courseId);
    if (courseToAdd) {
      setCourses((prevCourses) => [...prevCourses, courseToAdd]);
    }
  };

  const filter = new Date();
  filter.setHours(filter.getHours() - 3);

  return (
    <div className="space-y-8">
      <div className="flex flex-col md:flex-row justify-between items-start md:items-center gap-4">
        <h1 className="text-3xl font-bold text-foreground">My Courses</h1>
        <div className="flex flex-col md:flex-row gap-2 md:gap-4 w-full md:w-auto">
          <div className="relative flex-grow">
            <MagnifyingGlassIcon className="absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-foreground/60" />
            <input
              type="text"
              placeholder="Search courses..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="pl-12 py-2 w-full border border-border rounded-lg bg-card text-foreground placeholder:text-foreground/60 focus:ring-2 focus:ring-primary-accent focus:outline-none text-sm"
            />
          </div>
          <button
            onClick={() => setShowBookmarked((v) => !v)}
            className={`flex items-center gap-2 px-4 py-2 rounded-lg border border-border transition-colors ${showBookmarked ? 'bg-[var(--primary-accent)] text-white' : 'bg-card text-foreground hover:bg-background'}`}
          >
            <StarIcon className={`h-5 w-5 ${showBookmarked ? 'text-yellow-300' : 'text-foreground/70'}`} />
            <span>Bookmarked</span>
          </button>
          <button
            onClick={() => setIsModalOpen(true)}
            className="flex items-center gap-2 px-4 py-2 rounded-lg bg-[var(--primary-accent)] text-white border-[var(--primary-accent)] hover:brightness-95 transition-colors"
          >
            <PlusCircleIcon className="h-5 w-5" />
            <span>Add Course</span>
          </button>
        </div>
      </div>

      {filteredCourses.length > 0 ? (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {filteredCourses.map((course, idx) => {
            // Example status logic (replace with real logic as needed)
            const status = course.nextSession !== 'N/A' ? 'Ongoing' : 'Upcoming';
            // Example progress (parse attendanceRate as percent)
            const progress = parseInt(course.attendanceRate) || 0;
            // Example instructor (placeholder)
            const instructor = { name: 'Dr. Jane Smith', avatar: null };
            // Example favorite state (from state)
            const isFavorite = bookmarked[course.id] || false;
            // Example recent activity (examples)
            let recentActivity = 'No recent activity';
            if (course.lastAttendance !== 'N/A') {
              const activities = [
                `Last attended: ${course.lastAttendance}`,
                `Assignment submitted on ${course.lastAttendance}`,
                `Quiz completed on ${course.lastAttendance}`,
                `Discussion posted on ${course.lastAttendance}`,
                `Feedback received on ${course.lastAttendance}`,
              ];
              recentActivity = activities[idx % activities.length];
            }
            return (
              <div
                key={course.id}
                className="relative bg-card rounded-2xl shadow-lg hover:shadow-2xl transition-all duration-300 overflow-hidden border border-border hover:-translate-y-1 group"
              >
                {/* Decorative accent bar */}
                <div className="absolute left-0 top-0 h-full w-1 bg-primary-accent group-hover:bg-primary-accent/80 transition-colors" />
                {/* Quick actions menu */}
                <div className="absolute top-4 right-4 z-10 flex items-center gap-2">
                  <button
                    className={`p-1 rounded-full ${isFavorite ? 'bg-yellow-400/10 text-yellow-400' : 'hover:bg-background text-foreground/70 hover:text-foreground'} transition-colors`}
                    title={isFavorite ? 'Remove bookmark' : 'Bookmark'}
                    onClick={() => setBookmarked((prev) => ({ ...prev, [course.id]: !isFavorite }))}
                  >
                    <StarIcon className="h-5 w-5" fill={isFavorite ? 'currentColor' : 'none'} />
                  </button>
                  <button className="p-1 rounded-full hover:bg-background text-foreground/70 hover:text-foreground transition-colors" title="More actions">
                    <EllipsisVerticalIcon className="h-5 w-5" />
                  </button>
                </div>
                <div className="p-6 flex flex-col h-full">
                  <div className="flex items-center gap-4 mb-4">
                    <div className="p-3 bg-background rounded-full flex items-center justify-center">
                      <BookOpenIcon className="h-8 w-8 text-foreground/70" />
                    </div>
                    <div className="flex-1">
                      <h2 className="text-2xl font-bold text-foreground mb-1 line-clamp-1">{course.title}</h2>
                      <div className="flex gap-2 text-xs text-foreground/60 items-center">
                        <span className="font-medium">{course.semester}{course.semester == 1 ? 'st' : 'nd'} Semester</span>
                        <span className="font-medium">• {course.students} students</span>
                        {/* Status badge */}
                        <span className={`ml-2 px-2 py-0.5 rounded-full text-xs font-semibold border ${status === 'Ongoing' ? 'bg-green-100 text-green-700 border-green-300 dark:bg-green-900 dark:text-green-300 dark:border-green-700' : 'bg-yellow-100 text-yellow-700 border-yellow-300 dark:bg-yellow-900 dark:text-yellow-300 dark:border-yellow-700'}`}>{status}</span>
                      </div>
                    </div>
                  </div>
                  {/* Instructor info */}
                  <div className="flex items-center gap-2 mb-2">
                    <span className="inline-flex items-center gap-1 text-xs text-foreground/70">
                      <UserCircleIcon className="h-5 w-5 text-foreground/60" />
                      {instructor.name}
                    </span>
                  </div>
                  <p className="text-foreground/70 text-sm mb-4 line-clamp-3 flex-1">
                    {course.description || 'No description provided.'}
                  </p>
                  {/* Progress bar */}
                  <div className="mb-4">
                    <div className="flex justify-between items-center text-xs mb-1">
                      <span className="text-foreground/60">Attendance</span>
                      <span className="text-foreground/70 font-semibold">{course.attendanceRate}</span>
                    </div>
                    <div className="w-full h-2 bg-background rounded-full overflow-hidden">
                      <div className="h-2 bg-green-600 rounded-full transition-all" style={{ width: `${progress}%` }} />
                    </div>
                  </div>
                  <div className="flex justify-between items-center text-xs text-foreground/60 mb-2">
                    <span className="font-medium">Code: <span className="font-semibold text-foreground/90">{course.id}</span></span>
                    <span className="font-medium">Units: <span className="font-semibold text-foreground/90">{course.credits}</span></span>
                  </div>
                  {/* Recent activity */}
                  <div className="text-xs text-foreground/60 mb-4 italic">{recentActivity}</div>
                  <div className="flex gap-2 mt-auto">
                    <Link href={`/courses/${course.id}`} className="flex-1 flex items-center justify-center px-3 py-2 rounded-lg bg-black dark:bg-[var(--primary-accent)] text-white border-[var(--primary-accent)] hover:brightness-95 text-sm text-center transition-colors font-medium">
                      View Details
                    </Link>
                    {(new Date(course.activeSessionDatetime) > filter) ?
                      <Link href={`/attendance/${course.activeSessionId}`} className="text-center flex-1 px-3 py-2 rounded-lg bg-border text-foreground border border-border hover:bg-border/70 text-sm transition-colors font-medium">
                        Take Attendance
                      </Link> :
                      <button className="text-center flex-1 px-3 py-2 rounded-lg bg-border text-foreground border border-border hover:bg-border/70 text-sm transition-colors font-medium">
                        No Attendance Available
                      </button>}
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      ) : (
        <div className="text-center py-16 bg-card border border-border rounded-2xl">
          <BookOpenIcon className="mx-auto h-16 w-16 text-foreground/60" />
          <h3 className="mt-4 text-xl font-semibold text-foreground">
            No Courses Found
          </h3>
          <p className="mt-2 text-sm text-foreground/60">
            Get started by adding a new course.
          </p>
        </div>
      )}

      <AddCourseModal
        isOpen={isModalOpen}
        onClose={() => setIsModalOpen(false)}
        courses={availableCourses}
        onSelectCourse={handleSelectCourse}
      />
    </div>
  );
}


--- File: /home/flow/student-dashboard/src/app/(main)/courses/[courseId]/page.tsx ---
'use client';

import { useEffect, useState } from 'react';
import { useParams } from 'next/navigation';
import { UsersIcon, ChevronRightIcon, ChartBarIcon, ArrowLeftIcon } from '@heroicons/react/24/outline';
import Link from 'next/link';
import OverviewTab from './tabs/OverviewTab';
import AttendanceRecordsTab from './tabs/AttendanceRecordsTab';
import StudentsTab from './tabs/StudentsTab';

interface CourseOverview {
  courseId: number;
  courseName: string;
  courseCode: string;
  courseDesc: string;
  courseUnit: number;
  title: string;
  semester: string;
  students: number;
  lastAttendance: string;
  nextSession: string;
  attendanceRate: string;
  recentSessions: { date: string; attendees: number; totalStudents: number; rate: string; }[];
}

const CourseManagementPage = () => {
  const { courseId } = useParams();
  const [activeTab, setActiveTab] = useState('overview');
  const [course, setCourse] = useState<CourseOverview | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchCourseDetails = async () => {
      if (!courseId) return;

      try {
        setLoading(true);
        const response = await fetch(`/api/courses/${courseId}`);
        if (!response.ok) {
          throw new Error('Failed to fetch course details');
        }
        const data = await response.json();
        setCourse(data);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'An unknown error occurred');
      } finally {
        setLoading(false);
      }
    };

    fetchCourseDetails();
  }, [courseId]);

  const renderTabContent = () => {
    if (!course) return null; // Should not happen if loading/error handled

    switch (activeTab) {
      case 'overview':
        return <OverviewTab course={course} />;
      case 'attendanceRecords':
        return <AttendanceRecordsTab course={course} />;
      case 'students':
        return <StudentsTab course={course} />;
      default:
        return null;
    }
  };

  if (loading) {
    return (
      <div className="text-center py-16">
        <p className="text-lg text-gray-500">Loading course details...</p>
      </div>
    );
  }

  if (error) {
    return (
      <div className="text-center py-16">
        <p className="text-lg text-red-500">{error}</p>
        <Link href="/courses" className="mt-4 inline-flex items-center btn-secondary">
          <ArrowLeftIcon className="h-5 w-5 mr-2" />
          Back to Courses
        </Link>
      </div>
    );
  }

  if (!course) {
    return null; // Should not happen if error is handled
  }

  return (
    <div className="flex-1 flex flex-col overflow-hidden">
      {/* Header */}
      <header className="bg-card border-b border-border p-4">
        <div className="flex justify-between items-center">
          <div className="text-lg font-semibold text-foreground">Course Details</div>
        </div>
      </header>

      {/* Content */}
      <div className="flex-1 overflow-auto p-6 bg-background">
        {/* Breadcrumb */}
        <div className="flex items-center text-sm mb-6">
          <Link href="/courses" className="text-foreground/70 hover:text-primary-accent">Courses</Link>
          <ChevronRightIcon className="h-4 w-4 mx-2 text-foreground/60" />
          <span className="font-medium text-foreground">{course.courseCode}</span>
        </div>

        {/* Course header */}
        <div className="bg-card rounded-lg border border-border p-6 mb-6">
          <div className="flex justify-between items-start">
            <div>
              <h1 className="text-2xl font-bold text-foreground mb-2">{course.courseName}</h1>
              <div className="text-sm text-foreground/70">{course.courseCode} • {course.semester}</div>

              <div className="mt-4 flex gap-6">
                <div className="flex items-center">
                  <UsersIcon className="h-5 w-5 text-primary-accent mr-2" />
                  <span><strong className="text-foreground">{course.students}</strong> Students</span>
                </div>
                <div className="flex items-center">
                  <ChartBarIcon className="h-5 w-5 text-secondary-accent mr-2" />
                  <span><strong className="text-foreground">{course.attendanceRate}</strong> Attendance</span>
                </div>
              </div>
            </div>
          </div>
        </div>

        {/* Tabs */}
        <div className="border-b border-border mb-6">
          <div className="flex space-x-0">
            <button
              onClick={() => setActiveTab('overview')}
              className={`p-2 px-4 rounded-t-md ${activeTab === 'overview' ? 'border-b-2 border-primary-accent text-primary-accent font-medium' : 'text-foreground/70 hover:text-foreground'}`}
            >
              Overview
            </button>
            <button
              onClick={() => setActiveTab('attendanceRecords')}
              className={`p-2 px-4 rounded-t-md ${activeTab === 'attendanceRecords' ? 'border-b-2 border-primary-accent text-primary-accent font-medium' : 'text-foreground/70 hover:text-foreground'}`}
            >
              Attendance Records
            </button>
            <button
              onClick={() => setActiveTab('students')}
              className={`p-2 px-4 rounded-t-md ${activeTab === 'students' ? 'border-b-2 border-primary-accent text-primary-accent font-medium' : 'text-foreground/70 hover:text-foreground'}`}
            >
              Students
            </button>
          </div>
        </div>

        {/* Tab Content */}
        <div>
          {renderTabContent()}
        </div>
      </div>
    </div>
  );
};

export default CourseManagementPage;


--- File: /home/flow/student-dashboard/src/app/(main)/courses/[courseId]/tabs/SessionsTab.tsx ---
import React from 'react';
import { PlusIcon, ArrowDownTrayIcon } from '@heroicons/react/24/outline';
import Link from 'next/link';

import { Course } from '@/data/types/types';

const SessionsTab = ({ course }: {course: Course}) => {
  // Sample session data
  const sessions = [
    { date: 'Mar 17, 2025', attendees: 124, totalStudents: 142, rate: '87%' },
    { date: 'Mar 14, 2025', attendees: 131, totalStudents: 142, rate: '92%' },
    { date: 'Mar 10, 2025', attendees: 118, totalStudents: 142, rate: '83%' },
    { date: 'Mar 07, 2025', attendees: 135, totalStudents: 142, rate: '95%' },
    { date: 'Mar 03, 2025', attendees: 128, totalStudents: 142, rate: '90%' },
  ];

  return (
    <div>
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-lg font-medium">Course Sessions</h2>
        <div className="flex gap-2">
          <button className="bg-primary-accent hover:bg-primary-accent/90 text-white px-4 py-2 rounded-md flex items-center text-sm">
            <PlusIcon className="h-5 w-5 mr-2" />
            Schedule New Session
          </button>
          <button className="bg-card-background border border-border-color text-foreground px-4 py-2 rounded-md flex items-center text-sm hover:bg-foreground/5">
            <ArrowDownTrayIcon className="h-5 w-5 mr-2" />
            Export Report
          </button>
        </div>
      </div>

      <div className="bg-card-background rounded-lg border border-border-color overflow-hidden">
        <table className="w-full">
          <thead>
            <tr className="border-b border-border-color bg-foreground/5">
              <th className="text-left py-3 px-4 font-medium text-foreground/80">Date</th>
              <th className="text-center py-3 px-4 font-medium text-foreground/80">Attendees</th>
              <th className="text-center py-3 px-4 font-medium text-foreground/80">Attendance Rate</th>
              <th className="text-right py-3 px-4 font-medium text-foreground/80"></th>
            </tr>
          </thead>
          <tbody>
            {sessions.map((session, index) => (
              <tr key={index} className="border-b border-border-color last:border-0">
                <td className="py-3 px-4">{session.date}</td>
                <td className="py-3 px-4 text-center">{session.attendees} / {session.totalStudents}</td>
                <td className="py-3 px-4 text-center">
                  <span className={`px-2 py-1 rounded-full text-xs ${parseFloat(session.rate) >= 90 ? 'bg-green-500/10 text-green-500' : parseFloat(session.rate) >= 80 ? 'bg-yellow-500/10 text-yellow-500' : 'bg-red-500/10 text-red-500'}`}>
                    {session.rate}
                  </span>
                </td>
                <td className="py-3 px-4 text-right">
                  <Link href={`/courses/${course.id}/sessions/${index}`} className="text-primary-accent hover:underline text-sm">
                    View Report
                  </Link>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default SessionsTab;


--- File: /home/flow/student-dashboard/src/app/(main)/courses/[courseId]/tabs/SettingsTab.tsx ---
import React from 'react';

import { Course } from '@/data/types/types';

const SettingsTab = ({ course }: {course: Course}) => {
  return (
    <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
      <div className="lg:col-span-2">
        <div className="bg-card-background rounded-lg border border-border-color p-6">
          <h2 className="text-lg font-medium mb-4">Course Information</h2>
          <form className="space-y-4">
            <div>
              <label htmlFor="courseTitle" className="block text-sm font-medium text-foreground/80 mb-1">Course Title</label>
              <input type="text" id="courseTitle" defaultValue={course.title} className="w-full bg-background border border-border-color rounded-md px-3 py-2 focus:outline-none focus:ring-1 focus:ring-primary-accent" />
            </div>
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label htmlFor="courseCode" className="block text-sm font-medium text-foreground/80 mb-1">Course Code</label>
                <input type="text" id="courseCode" defaultValue={course.id} className="w-full bg-background border border-border-color rounded-md px-3 py-2 focus:outline-none focus:ring-1 focus:ring-primary-accent" />
              </div>
              <div>
                <label htmlFor="semester" className="block text-sm font-medium text-foreground/80 mb-1">Semester</label>
                <input type="text" id="semester" defaultValue={course.semester} className="w-full bg-background border border-border-color rounded-md px-3 py-2 focus:outline-none focus:ring-1 focus:ring-primary-accent" />
              </div>
            </div>
            <div>
              <label htmlFor="courseDescription" className="block text-sm font-medium text-foreground/80 mb-1">Description</label>
              <textarea id="courseDescription" rows={4} className="w-full bg-background border border-border-color rounded-md px-3 py-2 focus:outline-none focus:ring-1 focus:ring-primary-accent" placeholder="Enter a brief description of the course..."></textarea>
            </div>
            <div className="flex justify-end">
              <button type="submit" className="bg-primary-accent hover:bg-primary-accent/90 text-white px-4 py-2 rounded-md">Save Changes</button>
            </div>
          </form>
        </div>
      </div>

      <div>
        <div className="bg-card-background rounded-lg border border-border-color p-6">
          <h2 className="text-lg font-medium mb-4">Danger Zone</h2>
          <p className="text-sm text-foreground/80 mb-4">These actions are irreversible. Please be certain before proceeding.</p>
          <div className="space-y-2">
            <button className="w-full bg-red-500/10 border border-red-500 text-red-500 rounded py-2 text-sm hover:bg-red-500/20">
              Delete Course
            </button>
          </div>
        </div>
      </div>
    </div>
  );
};

export default SettingsTab;


--- File: /home/flow/student-dashboard/src/app/(main)/courses/[courseId]/tabs/OverviewTab.tsx ---
import React from 'react';
import { CalendarDaysIcon, UsersIcon, ChartBarIcon } from '@heroicons/react/24/outline';

interface CourseOverview {
  courseId: number;
  courseName: string;
  courseCode: string;
  courseDesc: string;
  courseUnit: number;
  title: string;
  semester: string;
  students: number;
  lastAttendance: string;
  nextSession: string;
  attendanceRate: string;
  recentSessions: { date: string; attendees: number; totalStudents: number; rate: string; }[];
}

interface OverviewTabProps {
  course: CourseOverview;
}

const OverviewTab: React.FC<OverviewTabProps> = ({ course }) => {
  return (
    <div className="space-y-6">
      {/* Course Description */}
      <div className="bg-card rounded-lg border border-border p-6">
        <h3 className="text-xl font-semibold text-foreground mb-4">Course Description</h3>
        <p className="text-foreground/70 leading-relaxed">
          {course.courseDesc}
        </p>
      </div>

      {/* Key Metrics */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        <div className="bg-card rounded-lg border border-border p-6 flex items-center gap-4">
          <div className="p-3 bg-background rounded-full">
            <CalendarDaysIcon className="h-6 w-6 text-foreground/70" />
          </div>
          <div>
            <p className="text-sm text-foreground/60">Next Session</p>
            <p className="text-lg font-semibold text-foreground">{course.nextSession}</p>
          </div>
        </div>

        <div className="bg-card rounded-lg border border-border p-6 flex items-center gap-4">
          <div className="p-3 bg-background rounded-full">
            <ChartBarIcon className="h-6 w-6 text-foreground/70" />
          </div>
          <div>
            <p className="text-sm text-foreground/60">Attendance Rate</p>
            <p className="text-lg font-semibold text-foreground">{course.attendanceRate}</p>
          </div>
        </div>

        <div className="bg-card rounded-lg border border-border p-6 flex items-center gap-4">
          <div className="p-3 bg-background rounded-full">
            <UsersIcon className="h-6 w-6 text-foreground/70" />
          </div>
          <div>
            <p className="text-sm text-foreground/60">Total Students</p>
            <p className="text-lg font-semibold text-foreground">{course.students}</p>
          </div>
        </div>
      </div>

      {/* Recent Sessions */}
      <div className="bg-card rounded-lg border border-border p-6">
        <h3 className="text-xl font-semibold text-foreground mb-4">Recent Sessions</h3>
        <ul className="divide-y divide-border">
          {course.recentSessions.map((session, index) => (
            <li key={index} className="py-3 flex justify-between items-center">
              <div>
                <p className="text-foreground font-medium">{session.date}</p>
                <p className="text-sm text-foreground/70">{session.attendees} / {session.totalStudents} students attended</p>
              </div>
              <span className="px-3 py-1 bg-background text-foreground/90 text-xs font-medium rounded-full border border-border">
                {session.rate}
              </span>
            </li>
          ))}
        </ul>
      </div>
    </div>
  );
};

export default OverviewTab;


--- File: /home/flow/student-dashboard/src/app/(main)/courses/[courseId]/tabs/StudentsTab.tsx ---
import React from 'react';
import { UserCircleIcon, EnvelopeIcon, PhoneIcon } from '@heroicons/react/24/outline';

interface CourseOverview {
  courseId: number;
  courseName: string;
  courseCode: string;
  courseDesc: string;
  courseUnit: number;
  title: string;
  semester: string;
  students: number;
  lastAttendance: string;
  nextSession: string;
  attendanceRate: string;
  recentSessions: { date: string; attendees: number; totalStudents: number; rate: string; }[];
}

// Dummy student data (replace with actual data fetching in a real app)
const dummyStudents = [
  { id: 1, name: 'Alice Johnson', email: 'alice.j@example.com', phone: '123-456-7890' },
  { id: 2, name: 'Bob Williams', email: 'bob.w@example.com', phone: '098-765-4321' },
  { id: 3, name: 'Charlie Brown', email: 'charlie.b@example.com', phone: '555-123-4567' },
  { id: 4, name: 'Diana Prince', email: 'diana.p@example.com', phone: '777-888-9999' },
  { id: 5, name: 'Eve Adams', email: 'eve.a@example.com', phone: '111-222-3333' },
];

interface StudentsTabProps {
  course: CourseOverview;
}

const StudentsTab: React.FC<StudentsTabProps> = ({ course }) => {
  return (
    <div className="space-y-6">
      <div className="bg-card rounded-lg border border-border p-6">
        <h3 className="text-xl font-semibold text-foreground mb-4">Enrolled Students ({course.students})</h3>
        <ul className="divide-y divide-border">
          {dummyStudents.map((student) => (
            <li key={student.id} className="py-4 flex items-center justify-between">
              <div className="flex items-center gap-3">
                <UserCircleIcon className="h-8 w-8 text-foreground/70" />
                <div>
                  <p className="text-lg font-medium text-foreground">{student.name}</p>
                  <p className="text-sm text-foreground/70">{student.email}</p>
                </div>
              </div>
              <div className="flex gap-3">
                <a href={`mailto:${student.email}`} className="p-2 rounded-full bg-background text-foreground/90 hover:bg-border transition-colors border border-border">
                  <EnvelopeIcon className="h-5 w-5" />
                </a>
                <a href={`tel:${student.phone}`} className="p-2 rounded-full bg-background text-foreground/90 hover:bg-border transition-colors border border-border">
                  <PhoneIcon className="h-5 w-5" />
                </a>
              </div>
            </li>
          ))}
        </ul>
      </div>
    </div>
  );
};

export default StudentsTab;


--- File: /home/flow/student-dashboard/src/app/(main)/courses/[courseId]/tabs/AttendanceRecordsTab.tsx ---
import React from 'react';
import { CalendarIcon, CheckCircleIcon, XCircleIcon } from '@heroicons/react/24/outline';

interface CourseOverview {
  courseId: number;
  courseName: string;
  courseCode: string;
  courseDesc: string;
  courseUnit: number;
  title: string;
  semester: string;
  students: number;
  lastAttendance: string;
  nextSession: string;
  attendanceRate: string;
  recentSessions: { date: string; attendees: number; totalStudents: number; rate: string; }[];
}

interface AttendanceRecordsTabProps {
  course: CourseOverview;
}

const AttendanceRecordsTab: React.FC<AttendanceRecordsTabProps> = ({ course }) => {
  return (
    <div className="space-y-6">
      <div className="bg-card rounded-lg border border-border p-6">
        <h3 className="text-xl font-semibold text-foreground mb-4">Your Attendance Records</h3>
        <ul className="divide-y divide-border">
          {course.recentSessions.map((session, index) => (
            <li key={index} className="py-4 flex items-center justify-between">
              <div className="flex items-center gap-3">
                <CalendarIcon className="h-6 w-6 text-foreground/70" />
                <div>
                  <p className="text-lg font-medium text-foreground">{session.date}</p>
                  <p className="text-sm text-foreground/70">
                    You attended {session.attendees} out of {session.totalStudents} students
                  </p>
                </div>
              </div>
              <span className="px-3 py-1 bg-background text-foreground/90 text-xs font-medium rounded-full border border-border">
                {session.rate}
              </span>
            </li>
          ))}
        </ul>
      </div>
    </div>
  );
};

export default AttendanceRecordsTab;


--- File: /home/flow/student-dashboard/src/app/(main)/settings/page.tsx ---
"use client";
import React, { useState } from "react";


import { Cog6ToothIcon } from "@heroicons/react/24/outline";
import Image from "next/image";

// Mock components (assuming these are in your project)
const PageHeading = ({ title, description }: { title: string; description: string }) => (
  <div className="mb-6">
    <h1 className="text-2xl font-semibold text-foreground">{title}</h1>
    <p className="text-foreground/80">{description}</p>
  </div>
);

const ActionButton = ({
    label,
    variant,
    onClick,
    className,
    size,
    icon
}: {
    label: string;
    variant: "primary" | "secondary" | "danger";
    onClick?: () => void;
    className?: string;
    size?: 'small' | 'medium';
    icon?: React.ReactNode;
}) => {
    let baseClasses = "px-4 py-2 rounded-md transition-colors duration-200 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 font-medium text-sm inline-flex items-center";
    if (className) {
        baseClasses += " " + className;
    }
    const sizeClasses = size === 'small' ? 'px-3 py-1.5 text-xs' : 'px-4 py-2 text-sm';
    let variantClasses = '';
    if (variant === "primary") {
        variantClasses = "text-white shadow-sm bg-primary-accent hover:bg-primary-accent/90";
    } else if (variant === "secondary") {
        variantClasses = "text-foreground bg-card-background border border-border-color shadow-sm hover:bg-foreground/5";
    } else if (variant === "danger") {
        variantClasses = "text-white bg-red-500 hover:bg-red-600 focus:ring-red-500";
    }

    return (
        <button
            onClick={onClick}
            className={baseClasses + " " + variantClasses + " " + sizeClasses}
        >
            {icon && <span className="mr-2">{icon}</span>}
            {label}
        </button>
    );
};

const InputField = ({
  label,
  value,
  onChange,
  placeholder,
  type = "text",
  className,
}: {
  label: string;
  value: string;
  onChange: (e: React.ChangeEvent<HTMLInputElement>) => void;
  placeholder?: string;
  type?: string;
  className?: string;
}) => {
  let baseClasses = "block w-full px-4 py-2 border border-border-color rounded-md shadow-sm focus:outline-none focus:ring-primary-500 focus:border-primary-500 sm:text-sm bg-background text-foreground";
  if (className) {
    baseClasses += " " + className;
  }
  return (
    <div>
      <label className="block text-sm font-medium text-foreground/80 mb-2">{label}</label>
      <input
        type={type}
        value={value}
        onChange={onChange}
        placeholder={placeholder}
        className={baseClasses}
      />
    </div>
  );
};

export default function SettingsPage() {
    const [siteName, setSiteName] = useState("My Site"); // Example initial value
    const [primaryColor, setPrimaryColor] = useState("#4F46E5");  // Example initial value
    const [logo, setLogo] = useState<string | null>(null);

    const handleSiteNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setSiteName(e.target.value);
    };

    const handlePrimaryColorChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        setPrimaryColor(e.currentTarget.value);
    };

      const handleLogoChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const file = e.target.files?.[0];
        if (file) {
            const reader = new FileReader();
            reader.onload = (e) => {
                if (e.target?.result) {
                    setLogo(e.target.result as string);
                }
            };
            reader.readAsDataURL(file);
        } else {
            setLogo(null); // Reset logo if no file selected
        }
    };

    const handleSaveSettings = () => {
      // In a real application, you would send this data to a server
      console.log('Saving settings:', {
        siteName,
        primaryColor,
        logo,
      });
      // You might also want to show a success message to the user
    };

    return (
        <section className="max-w-4xl mx-auto py-8 px-4 sm:px-6 lg:px-8 space-y-6">
          <PageHeading title="Settings" description="Customize your dashboard settings" />
          <div className="bg-card-background shadow-md rounded-md p-6 sm:p-8 md:p-10">
            <div className="space-y-8">
              <div>
                <InputField
                  label="Site Name"
                  value={siteName}
                  onChange={handleSiteNameChange}
                  placeholder="Enter site name"
                />
              </div>
              <div>
                <label className="block text-sm font-medium text-foreground/80 mb-2">Primary Color</label>
                <div className="flex items-center gap-4">
                  <input
                    type="color"
                    value={primaryColor}
                    onChange={handlePrimaryColorChange}
                    className="w-12 h-12 rounded-full cursor-pointer border-none shadow-sm bg-background"
                  />
                  <span className='text-foreground/80 font-medium'>Current Primary Color: <span className="font-bold" style={{color: primaryColor}}> {primaryColor}</span></span>
                </div>
              </div>
              <div>
                <label className="block text-sm font-medium text-foreground/80 mb-2">Logo</label>
                <input
                  type="file"
                  accept="image/*"
                  onChange={handleLogoChange}
                  className="mb-2 bg-background text-foreground"
                />
                {logo && (
                  <div className="mt-2">
                    <Image src={logo} alt="Logo Preview" width={48} height={48} className="h-12 w-auto" />
                  </div>
                )}
                <p className="text-foreground/80 text-sm mt-1">Upload a logo for your dashboard (Recommended size: 100x100 pixels).</p>
              </div>
            </div>
            <div className="mt-10 pt-6 border-t border-border-color flex justify-end">
              <ActionButton
                onClick={handleSaveSettings}
                label="Save Settings"
                icon={<Cog6ToothIcon className="w-4 h-4" />}
                variant="primary"
                className="w-full sm:w-auto"
              />
            </div>
          </div>
        </section>
    );
}


--- File: /home/flow/student-dashboard/src/app/(main)/dashboard/page.tsx ---
"use client"
import {
  AcademicCapIcon,
  CalendarDaysIcon,
  ClipboardDocumentCheckIcon,
  ClockIcon,
} from '@heroicons/react/24/outline';
import Link from 'next/link';
import React, { useState, useEffect } from 'react';

type DeviceInfo = {
  name: string | null;
  id: string;
  lastActive: string;
};

type AttendanceStat = {
  label: string;
  value: number | string;
  icon: React.ElementType;
};

type Notification = {
  message: string;
  time: string;
};

type Activity = {
  detail: string;
  time: string;
};

const DashboardPage = () => {
  const [userName, setUserName] = useState('');
  const [attendanceStats, setAttendanceStats] = useState<AttendanceStat[]>([]);
  const [attendanceNotifications, setAttendanceNotifications] = useState<Notification[]>([]);
  const [attendanceActivity, setAttendanceActivity] = useState<Activity[]>([]);
  const [deviceInfo, setDeviceInfo] = useState<DeviceInfo | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const res = await fetch('/api/dashboard');
        if (!res.ok) {
          throw new Error('Failed to fetch dashboard data');
        }
        const data = await res.json();
        setUserName(data.userName);
        setAttendanceStats(data.attendanceStats.map((stat: any, index: number) => ({ ...stat, icon: [AcademicCapIcon, ClipboardDocumentCheckIcon, CalendarDaysIcon, ClockIcon][index] })));
        setAttendanceNotifications(data.attendanceNotifications);
        setAttendanceActivity(data.attendanceActivity);
        setDeviceInfo(data.deviceInfo);
      } catch (err: any) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  if (loading) {
    return <div>Loading...</div>;
  }

  if (error) {
    return <div>Error: {error}</div>;
  }

  return (
    <div className="space-y-8">
      {/* Hero Section */}
      <section className="bg-card text-foreground p-8 rounded-2xl shadow-lg border border-border text-left">
        <h1 className="text-3xl font-bold mb-1">Welcome, {userName}</h1>
        <p className="text-base font-light mb-6 text-foreground/70">
          Track your attendance and stay up to date with your classes.
        </p>
        {/* Attendance Notifications */}
        <div className="mb-6">
          <h2 className="text-lg font-semibold text-foreground mb-2">Attendance Alerts</h2>
          <ul className="space-y-2">
            {attendanceNotifications.map((n, i) => (
              <li key={i} className="flex justify-between items-center bg-background border border-border rounded-lg px-4 py-2 text-sm">
                <span className="text-foreground/90">{n.message}</span>
                <span className="text-xs text-foreground/60">{n.time}</span>
              </li>
            ))}
          </ul>
        </div>
        {/* Attendance Stats */}
        <div className="flex flex-col md:flex-row gap-4 mb-6">
          {attendanceStats.map((stat) => (
            <div key={stat.label} className="flex-1 bg-background border border-border rounded-xl p-4 flex items-center gap-3 shadow">
              <stat.icon className="h-8 w-8 text-foreground/70" />
              <div>
                <div className="text-2xl font-bold text-foreground">{stat.value}</div>
                <div className="text-sm text-foreground/70">{stat.label}</div>
              </div>
            </div>
          ))}
        </div>
        {/* Registered Device Section */}
        <div className="bg-background border border-border rounded-xl p-4 mb-6">
          <h2 className="text-lg font-semibold text-foreground mb-3">Registered Device</h2>
          {deviceInfo ? (
            <div className="flex items-center gap-4">
              <div className="flex-shrink-0 w-12 h-12 bg-border rounded-full flex items-center justify-center">
                {/* Device Icon */}
                <svg xmlns="http://www.w3.org/2000/svg" className="h-7 w-7 text-foreground/70" fill="none" viewBox="0 0 24 24" stroke="currentColor"><rect x="4" y="4" width="16" height="16" rx="3" strokeWidth="1.5"/><rect x="9" y="17" width="6" height="1.5" rx="0.75" fill="currentColor"/></svg>
              </div>
              <div>
                <div className="text-base font-semibold text-foreground">{deviceInfo.name}</div>
                <div className="text-sm text-foreground/70">Last active: {deviceInfo.lastActive}</div>
                <div className="text-xs text-foreground/60 mt-1">Device ID: {deviceInfo.id}</div>
              </div>
              <Link href="/device" className="ml-auto px-3 py-1.5 rounded-md bg-border text-foreground/90 border border-border hover:bg-border/70 transition-colors text-xs font-medium">Manage</Link>
            </div>
          ) : (
            <div className="flex items-center gap-4">
              <div className="flex-shrink-0 w-12 h-12 bg-border rounded-full flex items-center justify-center">
                {/* Device Icon */}
                <svg xmlns="http://www.w3.org/2000/svg" className="h-7 w-7 text-foreground/70" fill="none" viewBox="0 0 24 24" stroke="currentColor"><rect x="4" y="4" width="16" height="16" rx="3" strokeWidth="1.5"/><rect x="9" y="17" width="6" height="1.5" rx="0.75" fill="currentColor"/></svg>
              </div>
              <div>
                <div className="text-base font-semibold text-foreground/60">No device authorized</div>
                <div className="text-sm text-foreground/50">Authorize your device to mark attendance.</div>
              </div>
              <Link href="/device" className="ml-auto px-3 py-1.5 rounded-md bg-blue-600 text-white border border-blue-700 hover:bg-blue-700 transition-colors text-xs font-medium">Authorize Device</Link>
            </div>
          )}
        </div>
        {/* Attendance Activity */}
        <div className="bg-background border border-border rounded-xl p-4 mb-6">
          <h2 className="text-lg font-semibold text-foreground mb-3">Attendance History</h2>
          <ul className="space-y-3">
            {attendanceActivity.map((act, i) => (
              <li key={i} className="flex flex-col md:flex-row md:items-center md:justify-between gap-1">
                <span className="font-medium text-foreground/90">{act.detail}</span>
                <span className="text-xs text-foreground/70">{act.time}</span>
              </li>
            ))}
          </ul>
        </div>
        {/* Attendance Shortcuts */}
        <div className="flex flex-wrap gap-3 mt-8">
          <Link href="/courses" className="px-4 py-2 rounded-lg bg-border text-foreground border border-border hover:bg-border/70 transition-colors font-medium">View All Courses</Link>
        </div>
      </section>
    </div>
  );
};

export default DashboardPage;


--- File: /home/flow/student-dashboard/src/app/signup/page.tsx ---
import SignupForm from '@/components/SignupForm';
import Link from 'next/link';

export default function SignupPage() {
  return (
    <div className="flex min-h-screen flex-col justify-center bg-neutral-950 py-12 sm:px-6 lg:px-8">
      <div className="sm:mx-auto sm:w-full sm:max-w-md">
        <h2 className="mt-6 text-center text-3xl font-bold text-neutral-100">
          Create your account
        </h2>
        <p className="mt-2 text-center text-sm text-neutral-400">
          Or{' '}
          <Link
            href="/login"
            className="font-medium text-neutral-200 underline hover:text-white transition-colors"
          >
            sign in to your account
          </Link>
        </p>
      </div>

      <div className="mt-8 sm:mx-auto sm:w-full sm:max-w-md">
        <div className="bg-neutral-900 py-8 px-4 shadow-lg rounded-2xl sm:px-10 border border-neutral-800">
          <SignupForm />
        </div>
      </div>
    </div>
  );
}


--- File: /home/flow/student-dashboard/src/types/navigator.d.ts ---
interface Bluetooth {
  requestDevice(options?: RequestDeviceOptions): Promise<BluetoothDevice>;
  getAvailability(): Promise<boolean>;
  // Add other Web Bluetooth API methods/properties as needed
}

interface Navigator {
  bluetooth: Bluetooth;
}


--- File: /home/flow/student-dashboard/src/types/index.ts ---
export interface CourseOverview {
  attendanceId: number;
  id: string;
  name: string;
  description: string;
  credits: number;
  lastAttendance: string;
  nextSession: string;
  recentSessions: any[]; // Consider defining a more specific type for sessions if available
  students: number;
  attendanceRate: string;
  semester: number;
  lastSessionId: number;
  activeSessionId: number;
  activeSessionDatetime: string;
  title: string;
}


